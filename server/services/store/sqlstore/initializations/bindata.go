// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/templates.json
package initializations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xcf\x8e\x9c\xc7\x71\x7f\x95\x2f\xa3\x43\x80\x60\x0b\xe9\xae\xae\xee\xae\xe6\x8d\x12\x6d\x99\x80\x2c\xd1\x26\x1d\x27\xb0\x05\xa3\xff\x54\x2f\xc7\x9a\x9d\x59\xcc\x7c\x4b\x7a\x21\xf0\x94\xab\x1d\x3b\x86\x01\x23\x91\x11\x19\x31\x12\xf8\x16\x07\xc9\x21\x48\x90\x8b\x1f\x45\x2f\x10\x3d\x42\xd0\xb3\xd4\x72\x76\xf7\x1b\xb2\xb9\x14\xc5\xb5\x13\x90\x87\xd9\xfd\x66\xba\x7b\xaa\x7e\xfd\xab\x5f\x55\x57\xef\xc7\xb3\x47\xb2\xde\xcc\x57\xcb\xd9\x2d\x7d\x30\x2b\x71\x94\xd9\x2d\xed\x14\x1b\xb4\x2a\x28\xd4\xfa\x60\x96\x16\xab\xfc\xd1\x66\x76\xeb\x7b\x1f\xcf\xe6\x65\x76\x6b\x86\x29\xf9\x92\x4d\x81\x6c\x5c\x04\x12\xa5\x80\x45\x55\x88\xae\x18\x1d\xb3\xb2\x26\xfb\xd9\xc1\xec\x38\xae\x65\x39\xde\x6d\x9f\x98\x1d\xcc\xd6\xab\xd5\xd9\xeb\xce\x4f\x6f\xf2\x43\x39\x8a\xdb\x45\x8d\xa7\xc7\x32\xbb\x35\x4b\xab\xb8\x2e\xb3\x83\xd9\x38\x1f\x17\xed\xe7\x7b\xeb\xd5\x0f\x25\x8f\xc3\x83\xb8\xf9\x68\x33\x3b\x98\xd5\xb9\x2c\xca\x66\x76\xeb\xe3\x59\x8e\xeb\x72\x6f\xbd\x3a\x96\xf5\x38\x97\x9d\x85\xc7\xe0\xb1\x64\x1f\xc1\x56\xca\x40\xb6\x20\xb0\x22\x02\xce\xc8\xd9\x05\xaf\x7d\xd5\xb3\x83\xd9\x32\x1e\xb5\xf1\xef\x8f\x71\x3c\x69\x03\xaf\x8e\xc7\xf9\x6a\x79\x36\x4e\x5e\x2d\x56\xeb\xd9\xad\xd9\xf1\x7a\x75\xfc\x4e\x7b\x7d\x47\x6a\x3c\x59\x8c\xb3\x83\xb3\x29\x88\xbc\xe4\x4a\x1a\x4a\xb5\x05\x08\x45\x03\x87\x98\xc0\x6b\x12\xe7\xad\x44\xe7\xdb\x14\x8f\xe2\xe2\xa4\xcd\xf1\xbe\xfc\x68\x1c\xbe\x73\x3c\x7b\x72\x30\x31\xf4\x5f\xc9\x62\xb1\x7a\xfc\xc5\xc8\xa5\xf8\x64\xa2\x0f\x20\x09\x0b\x50\x30\x16\x38\xd8\x00\x18\x94\x0d\xb1\x04\xeb\x4d\xdc\x19\xf9\xee\x72\xb8\xb7\x5e\x1d\xae\x65\xb3\x99\x1e\xfd\xdd\xb5\xc8\x72\x67\xf0\x98\x30\x15\x08\xd9\x3b\xa0\x22\x01\x58\x55\x06\xab\xbd\x68\x57\x8b\x66\xbb\xbb\xec\x77\x56\x47\xc7\x0b\x19\xa5\xfc\xfe\xd7\xbf\xff\xf5\xe7\x9f\xfe\xdd\x8f\xa7\xa7\x78\x7b\xbd\x7a\x7c\x3e\x85\xb3\x62\x73\x88\x06\x4c\x8a\x11\xa8\x6a\x0f\xac\x5d\x06\x6c\x13\x47\x6f\x8a\x94\xb0\x33\xc5\xed\x75\x7e\x38\x7f\x24\x65\xf6\xe4\xc3\x73\x04\x6c\x64\x21\x79\xdc\xce\x75\xb6\x6a\x53\x1c\x63\xaa\x20\xca\x13\x50\x28\x01\xb8\x54\x0b\xde\xa0\x0a\xa8\x33\x16\x34\xcf\xfc\x79\x6f\x3d\x5f\xad\xe7\xe3\xe9\x8b\x3c\xfa\x6d\x29\xe7\x66\x31\xa9\x26\xab\x2a\x54\xeb\x02\x50\x8a\x05\x38\x9a\x08\xa5\x68\x9b\x4d\x75\x4a\xab\x5d\xb3\x7c\x63\x7e\xf8\x70\xf8\xfc\xd3\x5f\xfc\x53\x8f\x3f\xd9\x57\x1b\x3c\x13\x24\xb6\x01\x28\x23\x01\x4b\x12\xd0\x3e\x7b\xe7\x44\xb1\x2e\x65\x67\xec\x6f\x4a\x99\x9f\x1c\xed\x73\x65\x3c\xfd\x62\xd8\xc0\xd1\x7a\x87\x1e\x54\x6d\x9e\xf4\xba\x00\x5b\x55\x20\xe8\x6a\xa4\x84\x5a\x50\x9b\x9d\x61\xdf\x5b\x3d\x7e\x9e\x85\x31\xda\x12\x0d\x2a\xf0\xc6\x66\x20\x15\x0c\xb0\x67\xdf\xec\x21\xda\xe6\x52\x65\x6b\xac\xa7\x16\xbe\x13\x47\x19\xde\x59\x4b\x1c\xb7\xbf\x7d\x66\xe5\x67\x13\xe4\xb3\xa7\x0f\xe6\x47\xb2\x9d\xb7\xc8\x26\xaf\xe7\xdb\x37\x9e\xf1\xc4\x3c\x6f\x5f\x7d\xfe\xe9\xdf\xfc\x4b\xfb\x69\xf3\x40\x8e\x8e\x17\x5b\x56\x1a\xd7\x27\xf2\xe4\xe0\xe9\x08\xb7\xc7\x2d\x4d\x79\x87\xda\x3b\x6d\x0d\x1e\xcc\x4e\x8e\xcb\x85\x07\x88\x8c\x14\x5c\x9b\xa3\x61\xb5\x3d\x50\xe7\x5f\xcc\xd4\x68\x51\x49\x02\xa3\x72\x01\x62\x8b\xc0\x18\x22\xa4\x68\x52\xf6\xc2\x2c\xe8\xf6\x73\x58\xe7\xa7\x5f\xcc\x61\xdf\x14\x19\xe7\xcb\xc3\xe1\xfd\xd5\x28\x7d\x1c\xe6\x33\x6a\x14\xcf\x10\x0c\x59\xa0\xec\x14\xb0\x4e\x16\x54\x52\x62\x7c\x16\x72\xa6\x3e\xf3\xc8\x83\x36\xed\x0b\xf0\x7e\x11\x96\x46\x97\x68\x55\x8e\x50\x75\x0c\x40\x05\x35\xb0\x33\x0e\x74\x23\x6d\xf6\x59\x47\xdc\xc5\xcf\xed\x32\x7c\x63\x95\xf7\x6c\xff\xf6\x96\x2f\x76\x92\x54\x67\xb4\xcf\x20\x59\x6b\x20\xad\xda\x4e\x72\x09\x24\x92\xd3\x06\x55\x35\x01\x77\x86\xbd\x3f\xc6\x65\x39\xd9\xc3\x8b\xf7\x4e\xd6\xc7\x8b\xf3\x91\xbd\x52\x95\x4d\x65\x70\x91\x34\x90\xcb\x05\xd8\x0b\x82\x35\xa2\x8a\x4a\x1a\xf3\x36\x9e\x7c\x31\xf2\x77\x45\x3e\x5a\x9c\x0e\xf7\x4f\x97\xf9\x79\xc0\xd7\xa6\xa0\x09\x14\x41\x92\x15\xa0\x8a\xd8\xa2\x04\x82\xb3\xda\x4a\x26\x9d\x29\xd2\x4e\xa8\x38\x39\x3a\x8a\xeb\xd3\x3d\x98\x1f\xe5\x47\xe3\x0b\xc0\xfe\xcb\x9f\xff\xcf\x7f\xfc\xb4\x07\xef\x5e\x7b\xed\x5c\x70\xee\x32\xde\xbd\xf6\xc6\x99\xc0\x7a\x1a\xef\x2e\x89\x09\x39\x6b\xa8\xd8\x36\xb2\x4f\x15\xb8\x50\x80\xea\x84\x22\xab\x5c\xd9\xe3\x7e\xbc\x77\x7e\xba\x23\x66\xcb\x7a\xb3\x5a\xc6\xc5\xf0\xee\x2a\x2e\x3a\x83\x76\x75\x35\xa7\xc4\x90\xa3\x75\x40\xc9\x1b\x60\xd3\xb6\x9e\x27\xe3\x53\x88\xce\xf9\xf2\xb2\x41\x7b\x87\xe2\x53\xb5\x98\xaa\x38\x88\xb9\x69\x82\x40\x0c\x8c\xba\xb6\x39\x62\xd4\xd9\x27\x45\xbb\x61\xf5\xc1\x6a\xb8\xb3\xea\xa1\x77\xef\xb3\x35\x21\x56\x30\x2a\x64\xa0\x92\x34\xb0\xc1\x00\x05\x95\x54\x2f\x41\x62\xde\xa5\xf7\x3b\xab\xf9\xf2\xb0\x23\x50\x07\x4e\x45\x62\xa3\xf7\x9c\x05\x28\x17\x01\x2e\xd9\x01\x6a\x8c\xa5\x18\x27\xee\x82\x0a\xb8\xb3\x5a\xca\x70\x16\xa0\x9f\x13\x46\x83\x47\x5b\x34\x41\xb1\x91\x81\x58\x2c\x70\x11\x0d\xae\x72\x56\x8a\x62\x70\xac\x9e\x59\xf8\x9d\x38\xca\xe1\x6a\xfd\xc2\x30\x7a\x71\x97\x1a\x24\x1b\x0d\x16\xa8\x8e\x19\xc8\x99\x04\xec\x6b\x0b\x79\x5e\x13\x66\x9d\x4c\xd8\xdd\xa5\xef\xcd\xab\x0c\xf7\x3f\x9a\x2f\x16\x3d\xea\x85\x55\x92\xad\x96\xa8\x4d\xdc\x51\x40\x06\x26\x0e\xc0\x49\xa1\x66\x55\x29\x58\xda\x19\xfc\xeb\xf3\x65\x5c\x66\x99\x1e\xf8\x83\x75\x5c\x1e\x9e\x2f\xbb\xd6\x64\x6a\xb0\x1a\x12\xf9\x0a\xa4\xdb\xb2\xab\x2e\x80\x86\x9d\x73\x1e\x59\x29\xde\x15\x00\x12\x17\xe3\xc3\xe7\xda\xda\x25\x8d\x14\x12\xa4\xac\x19\xc8\xd6\x0c\xcc\x41\x20\x49\x26\xae\x59\x58\xc9\x0e\x7d\xdf\x39\x91\xa1\x05\xd5\x97\x14\xa1\x21\xaa\xa0\xc4\x18\x48\x5a\x2b\x20\x74\x0c\x1c\x54\x00\x6d\x30\x5b\xa5\x30\x07\x25\x3b\xab\xfe\x96\x9e\x36\xc5\xa5\x51\x55\x64\x0c\xde\x57\x68\x1b\x06\xc8\xfa\x04\x4c\x3a\x81\x60\xf2\xd5\xbb\x9a\x2c\xda\xdd\x51\xb1\x6b\x54\x27\x5e\x9b\x20\x04\xd6\xd8\x06\x8c\x94\x80\xb3\xd2\xe0\x93\xc2\x10\xad\x4f\xac\x76\x01\xfd\x2d\xd3\x35\x6a\xb1\xc6\xeb\xec\x0c\x38\xd7\xd6\x4a\xcd\x02\xde\x30\x64\x2a\x99\x92\x44\x62\xda\x8d\x62\xdf\xa2\x29\x9f\x3d\x87\xb1\x3f\xfb\xe4\x77\xdd\x84\x6d\x51\x33\x7a\x75\x95\xb0\xad\xdb\xfe\x9f\x26\xec\x60\xa8\x06\x4c\x1e\x42\x2d\x1a\x28\x35\xe5\x55\xb3\x06\x45\x14\x53\x89\x92\x73\x0e\xfb\x09\xbb\xf3\xd3\x2f\x41\xd8\xfd\x59\x56\xf1\xde\x37\x21\x04\xec\x91\x81\x54\xd1\xc0\x3e\x3a\xb0\x81\x94\x4b\x29\xa5\x9a\xd4\xcb\x12\xf6\xbd\xf9\xf2\xa3\x73\x2a\x21\x49\x21\xa3\x85\x62\x9b\x6f\xb7\xaa\xdf\x06\x81\xea\xa9\xb6\x74\xd2\x28\xf1\xd7\x61\xec\x62\x7c\x74\xba\x12\x54\x63\xb0\x31\x76\x23\x10\x2c\x60\x45\xc5\xa0\x63\x44\x25\xd7\x61\xec\x12\x53\x2c\x25\x24\x88\xa5\x6a\xa0\x12\x2a\xb0\x57\x2d\xf3\xb4\x31\xbb\x2c\xd5\x29\xec\x65\xec\xe7\x21\xf2\x57\xbf\xe8\x44\xa4\x43\x15\x8c\xb5\xfa\x8a\x84\x70\xa8\x4d\xb0\x16\xf7\x20\xb2\xf8\xca\xc6\x73\x01\xd6\x5b\xe5\xc9\x08\x4c\xc5\x41\xac\x35\x49\xf2\xb5\xf8\x12\xf7\x23\xb2\xf3\xd3\x2f\x46\xe4\xb7\x57\xb1\x1c\xc5\xe3\x2e\x28\x5a\xa5\xb5\x2f\x16\x21\xe5\xec\x81\xbc\x55\xc0\x18\x23\xb0\xd1\xd1\x58\x9d\x89\xe2\x4b\x43\xf1\x12\xd3\x70\xb6\xd6\x57\x17\x20\x29\x29\x40\x4e\x32\xb0\x89\x06\x58\x6a\x4c\xa1\x90\x97\xba\xcb\x8a\xef\xaf\xc6\xe1\xfe\x18\xd7\x2d\x43\xea\xc0\xa4\x64\x57\x30\x65\x0b\xa5\x62\x02\xaa\xde\x03\x93\x0f\x20\x36\x64\x49\xca\x84\x40\xee\xda\x49\x3f\x53\xf0\xce\xa5\x08\xd6\x45\x0b\xc4\x6d\xa3\xb2\xab\x80\xda\x79\xac\xa4\xad\x09\x76\x22\xe9\x7f\xa1\x9e\x40\xe5\xb5\x8f\xc5\x80\xf5\x4d\x91\x93\x76\xc0\xa6\x36\x3d\xa1\x8d\xa9\xb5\x9a\xa2\xf5\xab\xa4\x28\x84\x24\xd1\x8a\x81\x10\xa3\x06\x52\xde\x02\x67\x9b\x41\xe9\x44\x94\x5c\xd3\x40\xbb\xe1\xfe\x6b\xc7\xf3\x3c\x7c\xf6\xc9\xef\x3a\x2c\xe2\x44\x62\x70\xb9\xa5\xe3\x4e\x03\x85\x16\x36\xac\xa5\xa6\x3a\xad\xf1\xc2\xd5\xd3\x6e\xb8\x6f\x9c\xd8\xf2\xfd\xdf\x4e\x0f\xbd\xa3\x32\x75\x2d\x29\x59\x6d\x41\x4a\x41\xa0\x58\x2d\xb0\xaa\x19\xc8\x78\x29\x88\x5a\x47\xda\x2d\x7e\xbc\x7d\x72\x38\x7c\xfe\xe9\xcf\xfe\xe1\x79\x56\x76\x2a\xb0\xad\xe4\xc0\x48\xb3\x32\x3b\x69\xc2\xd5\x00\xa6\xc0\x9e\x48\x49\xd4\x79\x07\xdb\xc7\xeb\xf9\x72\x7c\x49\x6c\x67\xa5\x9d\x77\xb9\xe5\xb5\xdb\x88\x6f\x08\x38\x89\x85\x9c\x05\x91\x7d\x89\xd1\xe5\xdd\xa4\x6d\x3b\xc7\xd0\xa7\x26\xa4\x50\xb4\x86\x14\x90\x53\x6d\xdf\xe8\x04\xcc\x86\x01\xb3\x75\xc2\x22\x36\x54\xb9\x3a\x76\x9f\xa6\xd0\xc4\x01\x0d\x2b\xd0\xb1\x31\x39\x96\x02\xac\x0c\x41\x54\x59\xa2\xc1\x96\xa2\xbb\xab\x63\x9b\xe7\x59\xbb\xfa\x6a\x62\x21\x84\x64\x74\x04\x8a\x19\x81\x75\x55\x80\x2c\x2d\x01\xb2\xc9\x90\xbc\x52\xa9\x29\x27\x96\x5c\x62\x06\xc3\x49\x80\x8a\x71\xc0\x5e\x63\x53\x2c\x96\x73\xe6\xc8\xb2\x8b\x90\x7b\xba\xbb\xd0\x24\x2e\xfa\x8a\xc1\x03\x51\x33\xb7\x67\x03\x1c\x93\x01\x13\xab\x4d\xd1\x61\x8e\x7a\xb7\x88\x75\x6f\x8f\x8d\x77\x8b\x4c\xd9\xa1\xf6\x28\x11\x6c\x89\x1e\xa8\x34\xd2\xd3\xec\xc0\x78\x74\xbe\xb0\x48\x88\xbb\x21\xf8\xde\xa4\x69\x9f\x9f\x10\xff\x67\x77\x34\x43\x8b\x56\x31\x5d\x8d\x66\x06\x15\x2a\x52\xd3\xd1\x4c\x29\x9f\x63\x76\x0e\x28\x26\x0b\x94\x5a\x68\xb0\x09\x01\x55\x28\x41\xac\x8d\x59\xe5\x8b\xd1\xac\xb3\x70\xfd\xea\x85\xee\x7c\x31\xe0\xdd\x97\x71\x9c\x2f\x0f\x37\xc3\x77\xfe\xf2\x42\xd0\x7b\x56\x29\xfb\xe4\xcc\x56\xc7\x3b\x11\xf0\xe3\xbe\x62\x77\x77\x59\xb9\xab\xd4\xda\x59\xd4\x7c\x32\x55\xc5\x0b\xc1\x6a\x9a\xaa\xe2\x29\xb2\x41\x85\x69\x27\xea\x6c\xac\xab\x4d\xfb\x21\x47\xa0\xa4\x05\xd8\xb5\x55\x55\x92\x50\x28\x7a\xbd\x8d\x04\x37\xc0\x89\x2d\x54\x4c\x79\x6f\x02\xe2\xd7\x74\x64\xe7\xc9\xc3\xeb\x76\x24\x92\xb2\x48\x13\xda\x12\x49\x6b\x85\x66\x9f\x23\x0b\x19\x4a\x0a\xbc\x8d\x0e\xc8\x9b\x02\x8c\x46\x20\x58\x8e\x39\x70\xac\xce\x95\x37\xe4\xc8\x47\x73\x79\xbc\xe3\xc8\xb7\x4f\x87\x1d\x76\xbf\x28\x41\x3f\x58\x17\x59\x9f\x95\xfe\xf2\x6a\x71\x72\xb4\xfc\xee\xbc\x8c\x0f\xdb\xe3\x27\xed\xad\x8b\xb1\x3d\xfd\xf8\xe9\xab\xa7\x35\xc2\xe6\xe9\xf8\x94\x00\xe3\xb2\x89\xc2\xd9\xe1\x7a\x75\x72\xfc\xf6\xe9\xdd\x97\x38\xe2\x78\x38\x2f\x45\x96\x1f\x6c\x99\xf4\x6e\x5b\xd0\xf7\xfa\xce\x5b\x3e\x3c\x98\x6d\x56\xeb\xf1\x83\xdd\xaa\x65\xfb\xc2\x0f\x2e\x6a\xef\x47\xf3\xcd\x3c\x2d\x64\x77\xfc\x0f\xcf\x7f\xfb\x54\x78\x9f\x3e\x9d\xb7\x6b\xc5\x1f\xee\x2d\xe4\x9b\xa9\x42\xbe\x35\x6e\x5f\x56\xe2\xaa\xb1\xc5\x24\x03\x2a\x15\x0f\x14\xd5\xb6\x7e\x40\x40\x96\x55\xc0\x6c\x5c\x65\x73\x33\x28\xe0\x4e\x1c\x63\x8a\x1b\x19\xee\x9f\xbd\x73\x92\xcb\x7f\xfe\xdf\xd7\x25\xf2\x2f\x77\xff\x77\x9d\x7c\x4d\x12\x79\xcb\x2a\x8c\x9f\xc8\x2d\x03\x79\xe7\x68\xda\x8b\x29\x14\x5d\x73\xa3\x6f\xa5\x9b\xa4\xaf\x0e\x58\xe7\x04\xd1\xa9\xa4\xb4\x09\x39\xf1\x0d\xd9\xff\xb7\x17\xfb\x6a\x21\xfb\x77\x7f\xdf\x31\xda\x2d\xed\xc3\xc1\xec\x07\x3f\x78\x3a\x13\xb2\x3a\xe8\xf4\xbd\x46\xec\x75\xac\xd6\xea\xa5\xb8\xe8\x2a\xb1\xbc\x80\x32\xc6\x98\xb6\x55\xdf\x97\xa1\x8c\xce\x73\xf9\x4e\x2e\xec\x32\xf6\x14\x01\x21\x3a\x0a\x6e\x8a\x80\x8c\xd3\xc6\xe2\x34\x74\xb3\xca\x45\xb2\x66\x40\x0e\x06\x28\x48\x00\x26\xc9\x60\xd1\x96\xa4\xa2\xa5\x62\xd2\xcd\x80\xee\xdb\xa7\xc3\x79\x89\xe3\xb5\x07\xae\x4e\x9f\xbe\x34\xbe\xae\x11\x92\xa6\x7d\x4d\xe4\xc3\x44\xd2\x80\x68\xd9\x93\x9f\xf6\x75\x75\x31\x14\x2d\x09\x9c\x71\x02\x54\xb3\x05\x36\xda\x43\x66\x8c\xc1\x1b\xd6\xce\xdb\x9b\x11\x6c\x6e\xdf\xbb\x3b\xbc\x17\x4f\x65\x3d\x1d\x66\x7e\xfc\xef\x37\x23\xcc\x5c\x5f\x66\x2a\xa7\xdc\xa4\xff\xb4\xd3\x84\x7b\x92\xbe\x16\x5d\x02\x3a\x0f\x69\x2b\x16\x28\x7b\x60\x83\x08\x88\x24\x2a\x57\x14\xef\xf8\xa2\xff\x3a\x4f\xfa\x5f\xbd\x33\xe0\x92\xff\xde\x5f\x3d\x1a\xf0\xe2\x3e\x5d\x2d\x47\x59\x8e\x5f\x6c\xd5\x99\x17\x15\x4b\x54\x2d\x77\x65\x0d\x54\x4a\x04\x56\xc5\x41\xb5\x56\xd9\x2a\x99\x8b\x4b\x4d\xdf\x3d\x4b\x13\xff\xeb\x8a\xcf\xbb\x4e\xb9\x6f\xcd\xb6\x35\xb2\x61\x31\x3f\x7c\x38\xfe\xc9\xec\xa0\xaf\x05\xa1\xf3\xc8\xff\xaa\x6f\xbd\xf6\x88\x06\x9d\xbd\xe4\xdb\x6d\x47\x1a\x2b\xe3\xf6\xe4\x82\x89\xb5\xca\x3a\x04\x90\xd8\x14\x8b\x53\x0c\x9c\x94\x01\x54\x51\x52\x40\xae\x7a\x7b\xec\xf0\x26\x7c\x7b\x95\x87\xc7\xb3\xa2\xe7\x6b\x67\xe1\xce\x6e\x91\xaf\x82\x85\xfb\xc0\x76\x95\xab\xb7\x1d\x0f\x5e\xa9\x2b\xb5\x01\xaf\x59\xb1\xc2\xbd\xc7\x15\xac\x2d\xfa\xea\xc0\x05\x53\x81\xa8\x29\xd8\x1a\x2a\x54\x8f\x41\xa1\xa2\x16\xeb\x6f\x06\x1e\x1e\x34\xc9\x34\x3c\xfd\x65\xb7\xa6\xec\xdb\xbb\xae\x49\xc3\xbe\x0d\xab\x8d\xbd\x28\x3f\x6f\x9e\x50\xec\x84\xf3\x2b\x20\x2d\x28\xa5\xa6\x7a\x6b\xc8\x7a\xa6\x3d\xbd\x35\xa8\xb4\x4a\x44\x0c\x19\x03\xb6\x90\x98\x80\x63\xf2\x90\x8b\xb3\x4e\xe7\x94\x55\xba\x54\x85\xea\xec\xa7\x79\xf5\xfe\x9b\xcb\xa5\xc4\x31\xae\xc7\x21\x0e\x25\xce\x17\xa7\xc3\x0f\x57\x27\xeb\x65\x5c\x4c\x29\x84\xcf\x7e\xf5\x93\xc9\x9a\x62\x4f\x2f\x4e\x77\x4f\x4d\x57\x2f\x44\x77\xdf\x41\x57\x17\x4b\x67\x23\xca\x54\x54\xb2\xd6\x7a\x6a\x10\xb8\x72\x8c\x6f\x59\x3b\xcd\x7b\xb0\xe1\x72\x8e\x1c\x33\xe4\x44\x0c\x14\x8d\x07\x66\x4b\xc0\x94\xa2\x84\xa4\x03\x13\xbf\x21\x6c\x5c\x8d\x4a\x9b\xaf\x2e\x3b\xe8\x6b\xea\xfa\x4a\xe2\x52\x67\xfb\x53\x17\x5a\xa7\x48\xc5\x22\x5a\xe3\x27\xc2\x97\xb5\x9a\xd1\xed\x49\x35\x0c\x57\x4a\xa2\x3c\x54\x5d\x63\xdb\x43\x19\x38\x6b\x0b\x31\x28\xaf\x94\xab\x21\x5a\x7b\x33\x48\xe5\x3d\x89\xeb\xe5\x30\xae\x86\xe3\x78\x76\xc4\x38\x75\x44\xf1\xdb\xeb\x72\x49\x67\x1f\x5d\x27\x97\x74\x76\x46\xbd\x76\x2e\x69\x59\x90\xbd\x52\x69\xf0\xda\x52\xd0\x86\xf7\x14\xc9\xac\xd2\x26\x73\x6c\x0c\x22\x2d\xa7\x52\x15\x38\x18\x04\xad\x03\x05\x15\xb5\x56\xe5\x86\xc4\x99\x0f\x8e\x65\x39\xac\x65\x9c\xaf\xe5\x48\x96\xe3\x10\x73\x5e\x9d\xec\xc3\xc6\x4f\xff\xf9\x8f\x31\xce\x74\xf5\x24\x4e\x63\x83\x9d\xb5\x97\xb3\x9f\x2d\x5d\x28\xa5\x68\x4f\x3f\xbb\x65\xb6\x9a\x59\x40\xbc\xc7\x96\xfd\x54\x60\x1f\x11\xd8\x19\xc5\xb9\x66\xf2\x59\xdd\x0c\x6c\x7c\xfb\x64\x39\x98\x61\x9c\x1f\xc9\x66\x88\xc3\x63\x91\xc9\x73\xb1\xcf\x3f\xfd\xe9\x5f\xdf\x0c\x58\x74\x36\x28\x76\xc2\xa2\xab\xa1\x74\x12\x16\x64\x50\x5f\x3d\x57\xdb\xc2\xc2\xb0\xde\x43\x19\x31\x59\x67\x24\x26\x48\xa4\x3c\x90\xa1\x08\xec\x35\x83\xe6\x92\x99\xbd\x28\x85\xf5\xc6\xc8\x8f\x72\x22\x43\x39\xeb\x76\x7d\xfd\xe7\x6a\x7d\x7d\xb8\x37\x47\x80\x4c\x2a\x0b\x8b\x18\xa6\x25\xa9\x61\x63\xf7\x28\x0b\xe5\x53\xb4\xd1\x28\x30\x12\x1c\x90\x48\x01\x2e\xb1\x02\x5b\xca\x49\xc5\xe8\x8d\xba\x74\x7d\xaf\xb3\x9b\xf4\xd5\xbb\x4f\x2f\x63\xa2\x19\x73\xf8\x8b\x97\x4b\x8c\x5f\x6f\xd6\xfa\x25\x95\x9f\xcf\x3a\x30\x27\x4e\xc9\xce\x1f\x4c\x7a\x4e\x24\xd8\x6a\x02\x64\xc1\xa6\x85\x9a\x7a\xd1\xac\x41\xe7\xa4\x0a\x4a\x8d\x4e\xd7\x37\xe4\xb9\x4b\x24\xff\x6e\x5c\x17\x59\xce\x97\x87\x7b\xca\xcf\xff\x76\x85\xdb\xbb\xba\x86\x3b\x9b\x7f\x27\xcf\x25\x0d\x29\x85\x93\x3d\xaf\x96\x7d\xd8\x53\x30\xb6\x68\x48\x63\xd6\x60\xac\x89\x40\x58\x53\xb3\x78\x85\x58\x92\x4b\x28\x36\x65\x5f\x6e\x86\xc5\xdf\x97\xc7\xc3\x2b\x34\x99\xbc\x76\xf3\x13\x39\x6d\xae\x50\x55\x7b\x60\xb5\x72\x7b\xcc\xef\x8b\xd2\xe4\x38\x80\xd4\x50\x81\x72\xf5\xc0\x8e\x0b\x24\xb1\xe8\xc5\x55\xe3\x8a\xbb\x19\xe6\xff\xba\x48\x19\xbe\xbe\x38\xa9\xf5\x74\x1a\xf2\x3f\xfb\xd7\xaf\x1e\xf2\xa8\xd8\xd1\xd4\x51\x3c\x06\xb6\x76\x8f\xcd\x83\x27\xeb\x54\x0a\x90\xab\xad\x40\xa4\x72\x4b\x6a\x14\xa0\x75\xda\x26\xaf\x0d\x6a\xb9\x19\x36\x7f\x77\x35\xd4\xd5\xba\x89\xc8\xb8\xd8\x23\x22\xff\xf6\x37\x6f\x80\x68\xb4\xb3\xfe\x8a\x7e\x6f\x0f\x8c\xc3\x7d\xa7\xc8\x14\x42\xb5\x2c\x19\x12\x69\x04\xca\x4c\xc0\xb9\x12\x04\x1f\xd1\x39\x0e\x9e\xe3\x25\xa2\xe9\x6c\xa8\x7f\xf5\x06\xfc\xcb\x41\xf9\xe4\x70\x73\xd6\x9c\xfc\x12\xc5\xea\x8e\xb2\xf2\xf6\x84\xab\xcc\x9f\xc6\xe7\xf9\x32\x2f\x4e\xca\xf6\x4e\xec\xf1\x79\x34\xed\xef\x2d\xdf\x76\x9e\x9e\x9d\x3a\xf4\x74\x5e\x7f\xf8\xe4\xda\xf2\xe0\xe3\x8b\xeb\xeb\xec\x13\x5e\xcb\x23\x59\x6f\xa4\xcc\x6e\xd5\xb8\xd8\xc8\x93\x57\x2f\x8d\x77\x5e\x75\xe8\xb4\x5f\x67\x73\x79\xd7\xb7\x9d\xd2\x3f\x44\x68\x91\x27\xa8\x89\xc8\xa3\xdb\xa7\x7f\xac\xb8\xaa\x6d\xd2\x80\x98\x18\x48\x9a\x2f\x11\x23\xc4\x82\x68\x0a\xea\x8c\x4a\xbd\xa1\x4d\x72\x39\xc9\x95\xe6\xce\xe1\xf6\xbd\xbb\x43\x91\xcd\xfc\x70\x39\x4d\x4f\x9f\xfc\x66\xaa\xca\xde\xe5\xa3\xee\x6b\x10\x5d\xc0\xe8\xbe\xc7\xd2\x05\x8c\xee\x0e\xfc\x2e\xfc\x74\x76\xb0\x4f\x76\x09\xd8\x10\x14\xf3\x44\x6b\xb8\x56\x6c\x71\x4f\xd2\xec\x39\x24\x36\x94\x80\x34\x5a\x20\x9b\xf5\x59\x82\x54\x8c\x4b\x2e\x64\x41\x46\x7b\x43\xb8\xf8\x74\x38\xbf\xd8\xf1\xda\x53\xe6\x4e\x4e\x78\x43\x9c\x79\x9d\xc4\xbb\x93\x0c\xaf\xcd\x72\x46\xa9\x96\x89\x4f\xc1\x8f\xd8\xb8\x3d\x47\x46\xc1\xa0\x2a\x8e\x14\xe4\x5a\x3c\x90\xad\x06\x38\xa3\x86\x12\x15\x2a\xed\x25\x2b\x9b\x6e\x06\xcb\xdd\xcd\xab\xe5\x66\x28\xab\xe5\x9f\x8e\x43\x99\x6f\x8e\x17\x71\x8f\xf8\xfd\xc9\x2f\xaf\x4b\x72\x9d\x17\xa7\xde\x08\xc9\x75\x5e\x61\xea\x24\xb9\xae\x0b\x40\x93\x24\x17\x0c\xa3\x9a\x48\xad\x8c\x56\x68\xd5\x9e\xf6\x88\xc4\x1c\x98\x5d\x84\x5a\x39\x00\x89\x69\x0c\x5d\x1d\x58\x0c\xe2\xbc\x8e\xa6\x06\xbe\x21\x28\x3b\x3a\x5e\xad\xc7\xe1\xcf\x87\xaf\xfd\xa8\xbd\x98\x46\xd8\xdf\xff\xe3\x75\x11\xd6\x79\xe7\xaf\x13\x61\x9d\x17\x36\x3b\x11\xd6\x79\x01\xef\xb5\x87\xd1\xf6\x15\x4c\x98\x44\x18\x59\xbf\x27\x91\x4c\x29\x17\x67\x7d\x84\xb8\xed\xe9\x76\xc5\x03\x7b\x65\x21\xc7\x40\x4c\x1e\xab\x92\x70\x33\xc2\xe8\xb6\x9f\xfb\xec\x22\xe7\x1f\x44\x4e\xd3\x05\xd9\xff\xcf\x69\xbe\xf2\x9c\x86\x03\x99\x89\xc4\x9f\xac\x62\xaf\xf7\x34\x0f\xa5\xec\x52\xa4\x6a\x80\xac\xdf\x96\xb8\x0a\x70\x0c\x01\x6a\x75\x49\x79\x5b\xa2\x8a\x6f\x2a\xda\x5f\xda\x25\x5f\x3b\x9e\xe7\xcd\xf6\x22\xf5\x1f\xc4\x26\xe9\x4a\x8f\xbe\xbc\x4d\xd2\x89\xae\xff\xeb\x9b\xc4\x68\x67\x3c\x4d\x6d\x12\xf2\x1c\xcc\x1e\x49\x9c\xb9\x92\x65\x55\xc0\xd8\xa4\x80\x8c\xd9\xd6\xec\x32\x64\xd6\x8e\xb3\x8d\xec\x2e\xff\x31\x94\x37\x99\x91\x3d\xbf\x8b\xaa\x57\xdf\x77\x0a\xb4\xae\x9a\xc8\x97\x98\x05\x76\xc2\xed\x8f\x2f\x0b\x7c\xdd\x3b\x03\x2d\xda\xc9\x13\x12\xa3\x91\xbc\xda\x23\xb2\x84\xb3\x17\x52\x0a\x32\xc5\x08\x84\xbe\x65\x34\xc2\x10\xc9\xeb\x64\x85\x35\xc6\x37\x25\xe3\x27\x45\x56\xfa\xf2\xee\x20\xdd\x44\x71\xf5\x7a\x76\xca\xab\x63\xbc\x73\x73\x75\x61\x7c\x52\xfb\x58\x74\x4c\x13\x57\xe7\xc8\x92\x71\xfb\x7a\x1c\xbb\xae\xb0\x5c\x00\x6f\xe7\x05\x9e\x57\x6f\xd1\xdf\xfe\xcd\xc6\x67\xe0\x7d\xeb\xad\xe1\xce\x7c\x93\x4f\x36\x9b\xf9\x6a\x39\xcc\x47\x39\xda\x7c\x7f\xf9\x67\xc3\x07\x4b\xf9\xfe\xb2\xfd\x7b\xeb\xad\xe1\x76\x1e\x2f\x3c\xbb\x3b\xca\xd1\x00\xc3\xea\xf1\xf2\xe2\x25\xac\xcb\xd6\x3b\xbf\xd7\x72\xd9\x7a\xbb\x0f\x76\xad\xf7\xe1\x93\xff\x0d\x00\x00\xff\xff\xb9\x1a\x53\x52\xb4\x59\x00\x00")

func templatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesJson,
		"templates.json",
	)
}

func templatesJson() (*asset, error) {
	bytes, err := templatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.json", size: 22964, mode: os.FileMode(420), modTime: time.Unix(1609785676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates.json": templatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates.json": &bintree{templatesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

