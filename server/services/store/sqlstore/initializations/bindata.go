// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/templates.json
package initializations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7c\xcd\x8e\x5c\xc9\x71\xee\xab\x9c\x7b\x66\x71\x81\x8b\x0e\xdc\xfc\x89\xcc\x8c\xec\x1d\x67\x28\x8d\x08\x48\x1a\x4a\x1c\x5d\x5d\x43\x1a\x08\x91\x99\x91\x64\x69\xaa\xab\x1a\x55\xd5\xa4\x1a\x03\xae\xbc\x95\x2c\x59\x10\x20\xd8\x23\x78\x04\x0b\x36\xb4\x94\x61\x2f\x0c\x1b\xde\xe8\x51\xf4\x02\x9e\x47\x30\xb2\x9a\xdd\xec\x9f\x53\x64\xb2\xf9\xd3\x3d\xb2\x31\xb3\x68\xd6\x39\x95\xe7\x54\xfc\x7e\xf1\x45\x64\x7e\x36\x3e\x96\xd5\x7a\xb6\x5c\x8c\xfb\x7a\x6f\x2c\xbc\x91\x71\x5f\x7b\x15\x82\x26\x15\xc9\x11\xed\x8d\x69\xbe\xcc\x9f\xae\xc7\xfd\x1f\x7c\x36\xce\xca\xb8\x3f\x2a\x15\x32\x67\xef\x01\x39\x39\xc0\xe4\x14\x90\x4b\x06\x8c\x8a\x25\x8a\x73\x9c\x55\x1e\xf7\xc6\x43\x5e\xc9\x62\x73\xaf\x7d\xc3\xa4\x14\x4a\xb6\x05\xb2\xf5\x0c\x28\x4a\x01\x89\xaa\xc0\xbe\x58\xcd\x59\x39\x9b\xc3\xb8\x37\xae\x96\xcb\x57\xba\x7f\x9d\x1f\xc9\x01\x6f\x5f\x7c\x73\x7c\x28\xe3\xfe\x98\x79\x55\xc6\xbd\x71\x33\xdb\xcc\xdb\x3f\x1f\xc8\x66\x33\x5b\x3c\x5c\x0f\xdf\xfb\xff\xe3\xde\x58\x67\x32\x2f\xeb\x71\xff\xb3\x71\x96\xdb\xef\x1d\xbf\xfc\xe2\xaf\x3e\xff\xcf\x7f\xfd\x79\x7b\xd7\xd5\xf2\x50\x56\x9b\x99\x6c\x2f\x73\x0c\xa6\xe4\xc0\xe0\x2a\x66\x40\x57\x0c\x90\x42\x04\xca\x86\xb2\x8f\x41\x87\xaa\xc7\xfd\xb1\x94\x90\x2c\x87\x08\x92\x4c\x01\x8c\xd6\x01\x45\x17\xc1\x44\xe5\x22\x97\xe8\x82\xe5\x71\x6f\x2c\xb6\x78\x32\xa9\x82\xa8\x80\x80\xb1\x44\xa0\x52\x1d\x04\x6b\x54\x34\x3a\x9b\x62\xec\xb8\x3f\x52\xa8\x2e\x06\x42\x48\xe4\x22\x60\x36\x08\x24\x49\x40\x87\x1c\xbc\x17\x45\xba\x94\xf1\xe9\xd3\xbd\x31\xaf\x84\x37\x72\x67\x73\xa2\x27\x6f\x74\x8c\x4e\xa3\xd9\x1b\x8f\x0e\xcb\x85\x0b\x46\xa1\x8b\x2a\xee\x8d\x45\xe6\x72\x72\x41\x3d\xdd\x3b\x55\x62\x48\xec\xd8\x2a\xb0\x12\x3d\xa0\x48\x01\x2a\x5c\x81\x1c\xe6\xa4\x98\x83\x55\xe1\xa2\x12\xa3\xc5\x1a\x4d\x0a\x10\x6b\xd1\x80\x29\x5a\xa0\x9a\x35\x28\x44\x4e\x85\x25\xe7\x1c\xcf\x2b\xb1\xf3\xfe\xab\x4a\x7c\x3c\x93\x27\xe7\x94\xf8\xfe\x92\x57\x65\xf8\x7f\x27\x1f\x3e\xd7\x61\x53\xf5\x47\xab\x22\xab\x71\xff\x07\x9f\xec\x8d\x79\x39\x3f\x3a\x58\x7c\x7f\x56\x36\x8f\xda\xe5\xa7\xed\xd6\xf9\xa6\x5d\xfd\xec\xd9\x5f\xeb\x93\x1b\x9b\xa2\x79\xb3\x35\xf8\x91\x17\x65\x7c\xba\x37\x3e\x9a\x95\x22\x8b\x8f\x0e\xdb\xa7\xf7\xca\xb3\xfb\xd6\xcb\xd5\xe6\xe4\xa3\x67\x1f\xb4\xd7\xfa\xf8\xe4\x0d\xd3\xf2\xc4\xce\x1e\xcf\xd6\xb3\x34\x97\x4b\xdf\x7c\xf6\xe9\xfd\x13\x9b\x3a\x7e\xf6\xf9\x84\xe6\x54\xb4\xce\xe9\x70\x55\x73\x67\x17\x26\x35\x27\x12\x5d\xb5\x11\xb2\x98\x0c\x58\x3c\x01\x69\xd2\xa0\x73\x52\xc5\x48\x65\xaf\xeb\x0d\x69\xee\x92\xfb\x7d\xc8\xab\x22\x8b\xd9\xe2\xe1\xb4\xf3\xfd\xf4\x9f\xaf\x78\x5e\x09\x21\x24\xb6\x09\x28\x18\x02\x54\x45\x03\x05\xf6\xe0\x22\x2a\x9f\x52\x4a\x35\xa9\x71\x7f\xb4\x28\x29\x66\xe3\xa0\xb8\x54\x9f\xb9\x94\x8b\x02\x35\x60\x6d\xd1\xc2\x2a\x09\xd3\xbe\x62\x51\x29\xe3\xaf\x4a\x5c\x5b\x47\x21\xaa\x69\x89\xeb\x6c\x9d\xaf\x6d\x7d\x43\x0c\x98\xb4\x00\xf9\xe6\xc1\x15\x25\x16\xe4\xa0\x2d\xde\x8e\x80\xf7\x31\xaf\x3f\x9d\x12\xf6\xb8\x37\xce\xd6\x1f\xcb\xc1\xe1\x7c\x1b\xe0\x37\xab\x23\xb9\x66\xd0\x43\x0c\x92\x2b\x6a\x28\xd5\x15\x40\x23\x1a\x28\x72\x82\xa0\x51\x7c\x70\xc2\x3e\xe8\x77\x10\xf4\x0c\x2a\x67\x70\x42\x91\x06\xb5\x56\xc6\xee\x52\x64\x41\x8b\x49\x41\x70\xec\x01\x83\x2d\x40\xc6\x0a\x44\x47\x9c\x23\x71\xf5\xbe\xdc\x90\x22\x2f\x07\xbd\xe3\xe1\xfe\x6a\xb6\x5c\xcd\x36\xc7\x6f\x2b\xea\x3d\x5c\x2d\x8f\x0e\xdf\x3f\xde\xbe\x76\x97\xba\xa6\x02\xe5\xe8\x9d\xb8\x1c\xd9\x82\x4d\xcc\x80\x55\x07\x20\xed\x33\x18\x4e\x26\x71\xb0\x45\x4a\x1c\xdf\x7c\x38\xed\x7b\xe3\xa9\xa0\xab\x83\xd7\xce\xda\x09\xcb\x31\xce\x7a\xe3\xa6\x2d\xc7\x28\xad\x12\x22\x41\x36\xd1\x34\xb3\x4f\x40\x9c\x02\xe4\xe2\x9d\xd7\x39\x65\x95\x2e\x85\x00\x9f\xc4\xc6\x9c\x35\x54\xe3\x32\x60\x48\x15\xa8\x60\x84\xea\x05\x99\x54\xae\x14\xcc\x79\xcb\xe9\xbc\xff\xe5\x98\x67\xc3\xab\xcd\xc0\x43\xe1\xd9\xfc\x78\xf8\xf1\xf2\x68\xb5\xe0\xf9\x54\x4c\xf8\xd3\x6f\x7e\x36\x09\x7e\xaa\xaf\x39\x25\x82\xcc\xce\x03\xa6\x60\x81\xac\x24\xb0\x01\x6d\x48\x91\xbd\x0f\xed\x75\x53\x75\x26\x55\xf1\xc0\xb9\x85\x8b\x88\x04\x64\x74\x6d\xf7\x32\xeb\x1c\x92\xc2\x2d\xf8\xf1\x49\x1b\x8c\x09\x52\xd6\x04\xe8\x6a\x06\xa2\x28\x90\x24\x23\xd5\x2c\xa4\xa4\xb6\x9c\xc6\x64\x62\x08\x15\xda\xa2\x80\x2e\x24\x20\xd4\x09\xc4\xa4\x50\x83\xaf\xc9\x19\xd7\x56\x8b\xc1\xb8\xa2\x11\x8a\x63\x02\x24\x71\x40\x45\x34\xf8\x4a\x59\x29\xe4\xe8\x69\x9b\x1e\x0c\x3a\xb6\xa6\x40\xf5\x44\x80\x7e\x9b\x4f\x6a\x0b\x2d\x41\xa3\xc9\x3a\xd9\x38\x95\x1e\x82\x76\xce\x05\x44\x7d\xd9\x36\xda\x05\xd2\x5e\xd3\x0e\xdb\xf0\x39\x33\x71\x86\x9c\x90\x00\xd9\x06\x20\x72\x08\x84\x89\x25\x26\x1d\x09\xe9\x86\x6c\xe3\x6a\x54\x59\x6f\x78\x73\xb4\x7e\x17\x31\xa5\xcb\x90\xde\x0d\xf8\xea\x33\x9c\x4e\x6b\xbd\x1a\x54\x82\x76\x2d\x78\x84\x2b\x18\xbc\x19\x8e\x26\xe3\x77\x20\xb9\xce\x64\x71\xce\x70\xde\x48\xaa\x39\x15\xe0\xa9\x55\xdc\x5f\x2d\x7f\x2c\x79\x33\x34\xf0\x70\xd5\x32\xee\x9f\x8b\x0e\xa7\x15\x60\x17\x56\xd8\x1b\x17\x7c\xf0\x2c\x22\x9d\x98\xdc\xf2\x4c\xa3\x9f\x35\x2b\x5b\xae\xc6\xfd\x6d\xf0\xf9\xa0\xfd\x7d\x57\x2a\x1f\xcd\x37\x0d\xa9\x94\x7e\x9c\xf1\x98\xe7\x47\xed\x19\xdf\x96\x9f\x6c\x86\xef\x1d\x8e\x4d\xb6\x57\x96\xfe\x0b\x99\xcf\x97\x4f\x4e\x57\xee\x2c\xdb\x4e\x57\xbe\xb7\x18\xee\xaf\x96\x0f\x57\xb2\x5e\x4f\xaf\xfe\xe1\x4a\x64\x71\x6e\xf1\x96\xf8\x0a\xc4\x1c\x3c\x60\x91\x08\xa4\x2a\x81\xd3\x41\xb4\xaf\x45\x93\x3b\xff\xda\x1f\x2c\x0f\x0e\x9b\x5d\x94\x3f\xfe\xf6\x8f\xbf\xfd\xf2\x8b\xbf\xf9\xe9\xf4\x23\xde\x5f\x2d\x9f\x9c\x3d\xa2\x2b\xe3\x3e\x7f\xc4\x9d\x55\x7e\x34\x7b\x2c\x65\x7c\xfa\xc9\x99\x05\xac\x65\x2e\x79\x33\x9e\x19\x62\x67\xfa\x7f\xa6\xcf\x73\xc0\xe4\x85\x1a\xfd\xae\x94\x33\xb1\xd8\x54\x93\x53\x15\xaa\xf3\x11\x30\x71\x01\x62\xcb\x50\x8a\x76\xd9\x56\xaf\xb4\x3a\x2f\x96\x6f\xcc\x1e\x3e\x1a\xbe\xfc\xe2\x57\xff\xd0\xa3\xcf\x2e\x0c\xf9\x7c\xed\x6f\x49\x99\x1d\x1d\xec\x52\x25\x1f\x9f\x2e\x1b\x89\x5d\xf0\x26\x80\xaa\x4d\x93\x41\x17\x20\xa7\x0a\x44\x5d\xad\x94\x58\x8b\xd1\xf6\xdc\xb2\xdf\x5c\x3e\x79\x91\x84\x0d\xbb\xc2\xd6\x28\x08\xb6\x45\x70\xd5\x4a\xaa\x40\xa1\xc9\x43\xb4\xcb\xa5\xca\x56\x58\xcf\x24\x7c\x97\x37\x32\x7c\xb0\x8d\x31\xe5\x82\x94\x9f\x3f\xe0\x24\x02\x95\x8f\x67\x07\xb2\x7d\x6e\x91\x75\x5e\xcd\x0e\x9f\x85\xe3\xf6\x23\xce\x38\x8e\x5f\x4e\xa0\xff\x9d\xc0\x68\x8a\x47\x30\x64\x30\xfa\xe9\x18\x66\xa9\x62\x12\x15\xa0\xea\xca\x0d\x07\x64\xa0\xac\x1d\x70\x54\x41\x29\x5f\x23\x3b\x77\x3b\x80\xd1\x37\x85\x57\x8b\x61\xb3\x1c\x0e\x79\xb6\xd8\xec\xe0\x83\x7e\x7f\x5d\x3c\x14\x42\x76\x36\x72\x05\xab\x62\xab\xca\x93\x06\xb2\x26\x42\x31\x4a\x6a\x90\x28\x9c\x4b\x3f\x1e\x8a\xac\xa2\x12\x6b\x21\x69\xad\x00\x4d\xab\xf1\xa3\x8a\xa0\xad\xc9\x4e\x29\x93\xa3\x92\x77\x81\x87\x9a\xff\xbb\x2b\x58\x39\x68\x87\x51\x5b\xc2\x1d\x26\x51\xd9\x19\xd5\x44\xa4\x72\x01\x24\x67\x80\x4c\x64\x68\x85\x7d\x0e\x42\x24\xc6\xef\x4e\x6b\x9d\xdf\x7e\x79\x5a\xfb\x96\xc8\x66\xb6\x78\x38\x7c\x7b\xb9\x91\xbe\xb4\x16\xb2\xd1\x46\x02\x41\xb4\xe8\x00\xb3\x57\x40\x3a\x39\x50\x49\x89\x0d\x59\xd0\xdb\xfa\xdc\x49\xb7\x70\xe4\x25\x21\xf0\x62\xa4\xb2\xba\xb0\x53\x99\xa1\x6a\x8e\x80\xc5\x68\x20\x6f\x3d\xe8\x96\xc7\x29\x64\xcd\xe6\x7c\x48\xb9\x53\x86\x6f\x2c\xf3\x8e\x8c\xd0\x6e\x39\x0d\xae\x52\xbd\xd5\x21\x83\x64\xad\x01\xb5\x6a\xc1\xd5\x27\x10\x46\xaf\xad\x51\xd5\x46\x73\x6e\xd9\x07\x1b\x5e\x94\xa3\x1d\xa9\xf2\xfe\xd1\xea\x70\x7e\xb6\x72\x50\xaa\x92\xad\x04\x9e\x51\x03\xfa\x5c\x80\x82\x18\x70\x56\x54\x51\x49\x9b\xbc\x85\x18\xa7\x2b\x7f\x5f\xe4\xd3\xf9\xf1\xf0\xe0\x78\x91\x5f\x14\x0b\xb5\x2d\xc6\x46\x64\x90\xe4\x04\xb0\x1a\xd3\x80\x83\x01\xef\xb4\x93\x8c\x3a\x23\xe3\x39\xf4\x70\x74\x70\xc0\xab\xe3\x1d\x61\x70\x23\x3f\xd9\xbc\x24\xfe\xfd\xfa\x97\x27\x65\xce\x4b\x43\x60\xd0\x41\x7b\x1f\xfd\x15\x56\x21\xe8\x60\xbd\x8d\xa4\xa7\xed\x1d\x63\xac\x8e\x24\x43\x42\x6d\x00\x33\x35\x20\x54\x11\x62\x60\xe3\x3d\xc5\x40\x7c\x89\x55\x28\xa1\x92\x0d\x54\x80\xf4\xd6\xd0\xc8\x00\x61\xf1\xc0\xb5\x26\x49\xa1\x96\x50\xf8\xbc\x4f\x74\xde\xff\x72\xfc\x7f\xf4\x70\x3d\x7c\xf9\xc5\x2f\xfe\xee\x15\xf0\xff\xf8\xa3\x1f\x3d\xfb\xba\x21\xb5\xa3\x18\x68\x86\xb4\x28\xb3\x67\xc2\x9f\x2d\xf2\xfc\xa8\x6c\x7d\xee\xf0\x0c\x86\x6f\x6b\xe8\xa0\x03\x17\x0b\x2e\x34\x6b\x42\xed\x81\x6c\x6d\xd1\x4a\x5b\x5b\x6b\xb5\x45\x9f\x81\x80\x2d\x6a\xd7\xb5\xa4\xe4\xb4\x03\x29\xc5\x00\x72\x75\x0d\x4c\x65\x40\x1b\xa4\x18\xa3\x35\x63\x1c\x3f\x79\x7a\x6d\x52\xf7\xb3\x8b\xef\x57\x43\xb5\x5c\xd0\x40\xb2\x9a\x01\x39\x1b\x20\x5d\x15\x18\x92\x96\x67\x5c\xb2\xd8\x3c\x63\x25\x8f\x65\xb5\x96\x32\xee\x57\x9e\xaf\xe5\xe9\xc5\xea\x64\xc3\x69\xeb\x3f\xaf\x52\x9d\x38\xa5\x75\x28\xce\x40\xca\x39\x00\x06\xa7\x80\x0c\x33\x90\xd5\x6c\x9d\xce\x88\xdc\xaa\x93\x4e\xf9\x79\x15\xc9\x55\xf4\x60\xa5\xdd\x46\x5e\x5a\x65\x6e\xc1\xa4\x48\x01\x51\x09\xeb\xdc\xf4\xdf\xf3\x6b\xa7\x08\x14\x44\xe3\x0c\x4d\xb0\xd6\x88\xc1\xf8\x5d\xac\xb5\x53\xda\x66\xe2\x56\x1a\x4b\x83\x98\xaa\x02\x45\x6b\x40\xeb\x88\x51\xb1\xd6\xaa\xdc\x12\x02\xe5\xa3\x43\x59\x0c\x2b\xd9\xcc\x56\x72\x20\x8b\xcd\xc0\x39\x2f\x8f\x76\x01\x86\x9f\xff\xe3\x9f\x23\x81\x42\x2a\xc9\xb6\xa6\xa8\xad\xc8\xc3\x68\x08\x08\x29\x02\x25\x65\x34\xa9\x8a\xd1\xe1\x0e\xc0\x40\xde\x39\x37\x55\x07\x2b\xa5\x70\x07\x86\x74\xc6\xa2\x36\x59\x83\x75\x96\x01\x4d\x4d\x40\x9a\x2a\x70\x49\x3e\x19\x71\x29\x87\x72\x3b\x3a\x1a\xdf\x96\x27\xc3\x6b\x70\xec\x6f\xbd\xbd\x81\x2d\xe3\x5f\xe1\xaf\xda\x05\xa7\x95\xdf\xd1\xde\x70\x44\x4e\x13\x09\x48\x08\x06\xd0\x37\xd7\x0c\x6c\x1a\x36\x51\x94\x6b\xc6\x90\xd5\xed\x70\xcd\xef\x1e\x2d\x06\x3b\x6c\x66\x07\xb2\x1e\x78\x78\x22\x32\xa9\x88\x2f\xbf\xf8\xf9\x5f\xde\x0e\xaf\xf4\x12\xb4\x8d\x82\xe0\xac\x6b\xc0\x3b\x25\xa0\xac\x34\x84\xa4\x4c\x64\x17\x12\x29\xee\xf7\xca\x5a\x93\xad\xd1\x69\x48\x18\x2a\xa0\x6e\x76\x54\x75\x01\x63\xc9\x7b\x1f\x0c\x29\x45\xd3\x5e\x89\xd6\xe8\xab\xcd\x92\xad\x57\x5a\xd2\x3b\x60\xbc\x13\x5f\xb5\x4b\x1a\x8c\x49\x04\x28\x2d\xfb\x1a\xc3\xc0\xc5\x18\x5b\x8c\xce\x46\xa9\x1b\x82\x35\x97\xcd\x42\x5a\x02\x1e\xee\xdc\xbf\x37\x14\x59\xcf\x1e\x2e\xa6\xad\xe2\xf3\xdf\x4d\xf1\xdd\x5d\x59\x75\x7f\x44\x83\xc2\x4e\x2c\x44\x66\x0d\xa8\x82\x03\xca\x2e\x83\xd2\x09\x31\x79\x2f\x7e\xdb\x03\xec\x4a\xe5\xfb\x23\x65\xe7\x42\xf5\x11\x92\x92\x02\xe8\x25\x03\x59\xb6\x40\x52\x39\xc5\x82\x41\xaa\xeb\x4d\xe5\xfb\xa3\x46\x8a\xc6\x92\x02\xcd\xd6\x00\x9a\x52\x80\x94\x45\x60\x95\x85\xad\x69\x65\x93\xef\xcd\xf8\xfb\xa3\x78\x0e\xd5\xc4\x00\x88\xa8\x00\x03\x59\x20\x4e\x16\x2c\x57\x97\xd8\x9b\xcc\x5a\x4f\xf7\xe4\x5c\x8c\x8a\xe8\x6a\xf4\xb1\x5a\x91\x33\x3b\xcc\xac\x33\x36\xec\xa8\x16\xaf\x1d\x59\xae\x90\xa0\xb2\x5a\x2f\x17\x3c\x1f\x3e\x5c\xf2\xbc\x93\x05\xed\x23\xb8\x5f\x89\x05\x3d\xc7\x99\x75\x86\xa2\xd3\xe2\xeb\xe3\xe5\x70\x77\xd9\xc3\x97\x75\x32\x15\xa7\xeb\xde\x5d\xce\x16\x0f\x3b\x98\xcf\x48\xa9\x08\x9b\x00\x2a\x67\x01\xcc\x45\x80\x4a\xf6\x60\xb4\xe1\x52\x6c\x73\x10\xbe\xb0\xec\x42\x86\x13\xc6\xf3\x05\xbc\x64\x1f\x6d\xff\x4c\xc2\x1f\xf0\x46\x1e\x2e\x57\x2f\xe5\x25\x2f\xd6\xb8\x5d\xe4\xc8\x39\x9e\x6f\x56\x65\x78\xf0\xe9\x6c\x3e\xef\xa1\x83\xbb\x80\xd4\xf3\xc5\xbf\x3e\x5b\xf0\x22\xcb\xf4\xc2\x1f\xad\x78\xf1\xf0\xec\xb5\xbb\x92\xc1\x39\x46\x55\x78\xbe\x79\xf4\x42\x59\xf7\xa4\xb4\xe7\x0c\xe5\x91\x0c\x77\x1b\xce\x79\x35\x56\xbf\x93\xd7\x3a\x7d\xeb\xef\xe8\x69\x51\x5c\x5a\xb5\x13\xfc\x9e\xad\x6a\xba\x56\xed\x4c\xde\x67\xab\xda\xae\x55\x8b\xb3\x41\x67\x6f\xc1\xfb\xf6\xae\xd8\x24\x10\x2c\x41\xc6\x92\x31\x09\x23\xe1\x79\x0e\xe8\x3b\x38\xa5\xb3\x17\xf0\x1d\x7f\xfa\xfc\x0f\xdd\x74\x87\x33\x9a\x4c\x50\x13\xb8\xc0\x6f\xff\xdf\x11\xb0\xab\x75\xc5\x26\x0b\x2a\x95\x00\xc8\x6a\x2b\x17\x04\x74\xa4\xa2\xc9\xd6\x57\xb2\xb7\x63\x1a\xe6\x2e\x6f\x38\xf1\x5a\x86\x07\x27\x77\x4e\xa2\x82\x5f\xfe\xc7\x75\xe7\xff\xde\xec\x28\x4c\x57\x8b\x64\x12\xf4\x13\xc6\x60\x27\xea\x71\x1d\x31\x78\xbf\x23\xed\x06\x8a\x89\x2c\x26\x40\x6d\x1c\xa0\xcb\xfa\x64\xfe\xaf\x58\x9f\x7c\xcc\x62\xc8\xb8\x5b\x42\x5a\x1d\x0f\x0f\x0e\x57\x97\x29\xfb\xb7\xd4\xb4\xee\x24\x4f\x6e\x88\x5c\xba\x4e\xeb\xbb\x93\x35\xba\x36\x1d\x64\x95\x72\xce\x4e\xa2\x3e\x24\xeb\x77\xcc\x4c\x84\xa2\x34\x7a\x8a\x20\x35\x56\xc0\x5c\x03\x90\xa7\x02\x49\x9c\x09\xe2\xab\xf5\xc5\xdf\x8e\x92\xff\xeb\x22\x65\xf8\xfa\xfc\xa8\xd6\xe3\xe9\x00\xf2\x8b\x7f\x7a\xf7\x63\x8c\x46\x91\xc7\x29\x97\x37\x91\x9c\xdb\x51\xe7\x93\xd2\x3a\x1a\x1f\x20\x6d\x03\x37\xe6\xd0\x80\x9f\x01\x63\x50\x54\xae\x46\x82\xbf\x34\xa7\xd2\xd9\x8b\x79\xfd\xde\xcd\x65\x9a\x65\xf9\x78\x30\x3b\x3a\x74\xff\x7e\x45\xda\x5d\xfd\x84\xfd\x71\x0b\xcc\x86\xf9\xec\xe1\xa3\xcd\xff\x1a\xf7\xfa\x9a\x3d\x9d\xcd\x95\xa9\xa2\x3b\x18\x63\x8d\x9f\xa0\xc2\x02\xda\x68\xd4\x8e\xb0\x4c\x3a\x88\x4e\x1c\xc0\x27\x6c\xf0\xc0\x5a\xa0\x2c\x11\xc8\x64\xaf\x1c\x56\xd1\x74\xc9\x2f\xb8\x24\xd6\x5e\xb7\xc2\x34\x35\xad\xb6\x30\x2b\x46\xc0\xa4\xe0\x6a\x29\x35\x27\x74\x17\x2a\xa6\xc0\xcc\xc2\x0a\x62\x40\x0b\x28\x89\x81\xc8\x07\x28\x4c\xd6\x84\x4a\xa5\xb8\x69\xbf\xd8\xb6\x5a\x9e\xeb\xe8\xbd\xf7\x86\xbb\xb3\x75\x3e\x5a\xaf\x67\xcb\xc5\x30\xdb\xc8\xc1\xfa\x87\x8b\xff\x33\x7c\xb4\x90\x1f\x2e\xda\x7f\xef\xbd\x37\xdc\xc9\x9b\x0b\xd7\xee\x6d\xe4\x60\x80\x61\xf9\x64\x21\xab\x0b\xda\x5d\x9e\x04\x72\xad\x94\x9a\x94\x24\xa1\x51\x71\x42\x92\xa7\x17\xa6\x24\x19\xad\x51\xc5\xa3\x82\x5c\x9b\xb5\xbb\xda\x24\x69\x34\x14\x56\x46\xe9\x20\x59\xb9\x74\x3b\xe8\x8b\x7b\x79\xb9\x58\x0f\x65\xb9\xf8\xdf\x9b\xa1\xcc\xd6\x87\x73\xde\x11\x69\x7e\xf6\xeb\xeb\xb2\x17\x5d\x9d\x94\x1b\x62\x2f\xa4\x20\x3b\x8b\x0a\xd0\xab\xb6\x9a\x4e\x40\x64\x09\x4c\x76\x5e\x48\xc4\xc5\x2a\xfd\xec\x45\x4e\x24\xb9\x70\x06\x4b\x49\x00\x8b\xf5\x40\x41\x9b\x86\xaf\x1d\xe5\x4c\x4c\x12\xa7\xd9\x8b\x68\xc9\xa8\x09\xee\xd4\x6a\x65\x9c\xda\x01\x86\x3b\xb3\xcc\x0e\xf6\xe2\xda\x39\x6a\x27\x7b\xd1\x3f\xc3\xd5\x95\xa3\x5e\x91\xbd\xb8\x3f\x5b\x7c\x7a\x56\x57\xf7\x24\xb7\x6b\xd0\x17\xc5\x06\xf6\xba\x22\x54\x6b\x0d\x60\x49\xad\x9a\x36\x05\x9c\x28\x8e\x9a\xd9\x28\xb9\x0e\x7d\x51\x38\x71\x29\x31\x01\x97\xaa\x01\x4b\xac\x40\x41\x35\xe0\xef\x38\xfb\x2c\xd5\x2b\xd3\x4b\x5f\xbc\xa8\x3c\xfb\xcd\xaf\x3a\xcb\xb3\xd3\x5d\x20\x93\x9b\x15\xa2\x73\xbb\x26\x95\x63\x40\xe7\x55\x8a\x90\xab\x6b\x19\x44\x65\xa0\xd0\xfc\xa4\x55\x74\x29\x68\x6b\xb4\xdc\x0e\x64\xf5\xe1\x72\xa8\xcb\xd5\xc0\xc3\x13\x9e\xef\x20\xf2\xff\xfa\x77\x37\xb0\x45\x44\x7b\x17\xae\xe4\xed\x76\xc1\x7a\xe3\xcc\xb4\xd4\x39\x64\xce\x5a\x21\x50\x29\x05\x50\xd7\x0a\x94\x6b\x02\x89\x85\xab\x37\x62\xaa\x5c\xca\xdb\xa8\x5c\x46\xcb\x19\x98\x0b\x02\x6e\x7f\x91\xc9\x16\xc4\xf9\xac\x02\x67\x6d\x4d\x39\x2f\x75\xed\x7c\xd2\x89\x32\x84\x44\x0c\x18\x22\x01\x09\x55\xc8\x0a\x4b\x0d\x29\x14\x53\xcb\x9f\x43\xde\xe6\xe4\xbc\x15\x4e\x90\x50\x05\x40\x8b\xdc\x02\x38\x81\xa6\x92\x89\x82\x28\x65\xea\xad\x99\xa6\x2e\x47\x32\x94\x13\x1a\xec\xed\xef\xd1\xe8\x23\xe8\x6e\xcf\x3c\xf5\xe4\xa0\xb4\x33\x26\x4e\x4f\xd8\x5b\xb2\x6e\xc7\xf0\x40\x22\xad\xb2\x8e\x11\x84\x7d\x6c\x38\x81\x80\x92\xb2\x60\x14\x4b\x8a\x86\xaa\x4e\xea\x86\x2a\x97\xab\x36\xb1\x39\x99\x0b\x7b\xeb\xf6\xd0\x39\xad\xf6\x4e\xec\xa1\xab\x04\x9b\xb2\x87\xa0\x7d\x50\x6a\x62\x70\x9e\x14\x29\xb3\x2b\xc7\x25\xa2\x48\xe4\x19\x6a\xa5\x08\x28\xb6\x34\x38\xeb\xc1\x99\x28\x3e\x68\xb6\x35\xd2\x2d\xc1\xf6\x07\x87\xcb\xd5\x66\xf8\xbf\xc3\xd7\x7e\xd2\xfe\x98\xce\x72\x7f\xfb\xf7\xd7\xc5\xf5\x5e\x84\xa3\xcf\xb1\xa9\x5f\x03\x46\x4f\x40\xce\x21\x60\x0a\xce\x06\xa1\x1a\xb6\x5b\x4f\x3a\x71\xbd\x64\x5f\x4c\xca\x0e\x4a\x35\x09\xb0\x86\x00\x84\x21\x82\xb8\x98\x25\x29\x1b\x23\xfa\x7e\x5c\x9f\x95\xf6\xc1\xe7\xe6\x43\x5b\x56\xde\x22\x50\x12\x07\x39\x8b\x31\x14\x0a\xb3\xef\x9e\x43\x7a\x9d\xae\x64\xfb\x09\xf6\x4a\x16\xda\xe2\x7a\x74\x61\x07\x57\x92\x62\xd1\x35\x6b\x01\x52\xad\xec\x6f\xc6\x45\x3a\x27\x60\xaf\x92\xd2\x36\xe6\x44\xb7\x64\xa7\xe0\x9d\xf9\x2e\xd4\xff\x82\x99\xbe\xae\x71\xf4\x7d\x1d\xe2\xde\x85\xf1\xbf\xbd\x4e\x6a\x5c\x1b\xd3\xcb\x7b\x6b\xbd\x6b\xa8\xf0\x0d\xed\xd5\xbe\xce\x40\x5e\xe7\xfe\x96\xce\x6d\x13\x5d\xc2\x9e\xa2\x56\x8d\xf1\x18\xfd\xd4\x56\x45\xeb\xb5\xdd\x05\x45\x53\xca\xc5\xbb\xc0\xc0\x5b\xd3\xf5\x25\xb4\x4a\xc6\x41\xe6\x88\x84\xc1\x54\x25\xf1\x76\x30\xfb\x5b\xb3\x1d\xbe\xfc\xe2\x57\xbf\xff\x6a\xcc\xa3\x76\x45\xdb\xff\x99\x47\x7d\xe7\xf3\xa8\x14\xd1\x4e\x14\x6c\xe8\x14\x05\xbd\x63\x68\x3b\x65\x9f\x18\xab\x05\x74\x61\xdb\x80\x28\x40\x1c\x23\xd4\xea\x93\x0a\xae\xb0\xe2\x9b\xa2\x07\x2f\x79\xc9\xd7\x0e\x67\x79\x3d\xfc\xe9\xf3\x3f\x7c\x35\x9c\xa4\x6b\x50\xea\xcd\x39\x49\xa7\x75\xfd\x77\x77\x12\xab\xbd\x0d\x38\xe5\x24\x18\x28\xda\x1d\x5d\xba\xac\x72\x91\x56\x6d\x1a\x8a\x16\x30\x4a\x04\x42\xc9\xe0\x8c\x2b\x49\xb1\xc3\x62\xd3\xed\x40\x41\xef\x1f\x0f\x0f\xde\xdd\xce\xe6\x3e\x78\x70\x53\xc7\xca\x98\xa6\xd4\x88\x93\x27\x1c\x50\xc0\x1d\x35\x76\x26\xe7\x55\x51\x1e\x22\x63\x00\xf4\x0d\xf1\x26\xe5\x80\x25\x18\x72\xc5\x72\x22\xbe\xa8\xeb\xce\x7e\xe2\xeb\xd7\xd8\x5f\x31\x06\x2b\x53\x45\x47\xaa\x80\x75\x49\x01\x5a\xbb\x65\x28\x33\x64\xd2\x9e\xb2\x63\xf2\x97\x7b\x02\x37\x39\x5a\xf1\x62\xaf\xe9\x6d\xa3\x75\x56\xe4\x5d\x33\xc5\x6f\xd0\x53\x3b\x83\xf4\x9f\xdf\x38\xc7\xdb\xce\x27\xc6\x19\x37\xb9\xd3\xc0\x6a\x83\x41\xed\xa8\xaa\x3b\xed\x76\x47\xb7\xec\xda\x56\x7f\xb9\x5b\xf6\xdd\x25\x97\x03\x3e\xec\x6a\x93\x75\x5a\xd0\xeb\x1c\x75\xd0\xd9\x4e\x3d\x3b\xea\x60\xb9\x19\xb6\x87\xbc\x48\xe9\xe9\x97\x75\x92\x3a\xd7\x3b\xee\x80\x30\x06\xef\x13\x83\xf3\xec\x00\xa9\x68\x20\xf2\x15\x8c\xf6\xc1\x54\xd4\xce\x46\x37\x71\xdc\xc1\x4b\x07\x7f\x3b\xad\xfc\xda\x3b\x71\x3b\xa7\xf9\x4f\xdf\xbb\x41\xf0\x2d\x02\x7f\xb9\x44\x3a\x19\xb9\xb3\xb6\x27\xaf\x3f\x3d\xa9\x80\x27\x97\x3e\x37\x0e\xde\xd9\xc2\x3f\x5d\xf8\xfd\xa3\x87\x27\x3b\x3d\x5f\x20\xe5\xce\x20\x71\x6a\xdb\xa7\x43\x78\xaf\x62\xdb\x9d\x24\xe0\xd9\xde\xe4\xed\x33\x86\xbe\xb1\xdf\xce\xc1\x81\x4b\x6b\xf7\x0d\xff\x76\x6e\xa9\xb8\xb4\xb6\x7d\x91\xb4\x3b\x53\xc6\xf5\x0f\xd9\xe8\x1a\x7d\x78\xfe\xce\xf7\x75\xf7\x11\x1b\x5d\xe4\xeb\xb9\x95\x77\xc8\xf8\xfc\xf1\x1a\xd9\x1b\x1d\x8c\x30\xb8\xc2\x01\xb0\xb4\xa0\xa7\xc9\x83\x0d\xc6\x87\x42\x22\x91\xcf\x8f\x07\xdc\x9f\x14\xed\x8b\xf7\x7d\xff\x5b\x77\xa7\xbd\x65\x33\x45\x13\x88\xd9\x1a\x65\x14\xee\xca\x66\xa4\x9d\x09\xd5\x83\x8f\xb6\x02\x22\x17\xa0\x1a\x2b\xd4\x60\x62\xfb\x9a\xc7\xe8\x6f\x47\x57\xea\xe3\x56\xdf\x0e\x8f\x5f\xed\x08\xcd\xce\xb9\x3a\x6f\x4c\xef\x30\x9d\xb6\x6e\xaf\x87\x99\xb8\x41\xe6\xb7\xb3\xa9\xf6\x1a\xfd\xae\xa8\x94\x9a\x3a\x61\x00\x5d\x20\xdc\x41\x56\x09\xe5\x20\xa8\x14\x64\x64\x06\x34\xa1\x21\x04\x21\x60\x0c\x3a\x39\x21\x6d\xf8\xa6\xfa\x5d\x93\x94\x6e\x7a\x73\xd5\xf8\x6d\xa4\x72\xdf\x4e\x85\xf1\xfa\xb5\x41\x67\x86\xe9\x4a\xfb\x93\x4c\xab\x33\x9e\x70\xa2\x1f\x81\x0e\xad\xdf\x75\xca\x59\xf5\x1c\x8b\x96\x04\xde\xfa\xe6\x2b\xd9\x35\xe1\x04\xc8\x64\x38\x06\x4b\xda\x07\x77\x3b\xf6\x8b\xdc\xb9\x7f\x6f\xf8\x26\x1f\x5f\xa2\x08\x9e\x9f\x57\xfb\x2f\xb7\x63\xa7\xc8\xf5\x0f\x4d\x55\x5e\xf9\x49\x62\x48\x7b\x8d\x66\x47\x9a\xab\xc9\x0b\xa2\x28\x30\xb6\x05\x9f\x58\x12\x50\xb0\x1a\xb2\xd4\x18\x31\x26\x17\xed\xa5\xe0\xe3\x42\xf1\xc6\x66\x03\xaa\x10\x01\xb2\x42\x20\xae\x1a\xa2\x76\x19\x2d\xe6\xa2\xca\xc5\x81\x9c\x18\x2a\xa5\x12\x20\xf8\x2a\x80\xa9\x12\x90\x60\x05\x32\xce\x1b\xcd\xb6\x18\x9f\xbe\xca\xc4\xd0\x27\x4f\xff\x2b\x00\x00\xff\xff\x3c\x84\xf8\x90\x66\x5d\x00\x00")

func templatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesJson,
		"templates.json",
	)
}

func templatesJson() (*asset, error) {
	bytes, err := templatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.json", size: 23910, mode: os.FileMode(420), modTime: time.Unix(1607718098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates.json": templatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates.json": &bintree{templatesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

