// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/templates.json
package initializations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6e\x5c\xc9\x71\x7e\x95\xc1\xb9\xc9\xcd\x14\xd2\x3f\x55\xdd\xd5\xbc\x93\x56\xf6\x46\x80\x63\x13\xbb\x72\x7e\x60\x2c\x8c\xea\xee\x6a\x69\xb2\xc3\x19\x62\x66\x28\x99\x10\xf8\x06\x4e\xe2\x18\x0b\x18\xc9\x06\x91\x11\x23\x40\x2e\x13\x24\x17\x41\x80\xdc\xf8\x51\xfc\x02\xd1\x23\x04\x67\x86\xa4\x28\xf2\x8c\xf6\x88\x2b\x2d\xe9\x24\x77\xc3\x73\xce\xd4\xe9\xa9\x9f\xaf\xaa\xbe\x2a\xbe\xec\x9e\xeb\x6a\x3d\x5b\x2e\xba\x03\x3b\xed\xaa\x6c\xb4\x3b\xb0\xc1\xc4\xe0\x1d\x71\x88\x81\xa6\x5d\x9e\x2f\xcb\x97\xeb\xee\xe0\x27\x2f\xbb\x59\xed\x0e\x3a\x63\x62\x91\x12\x02\xa0\x64\x02\xcc\x64\x80\x29\x3b\x70\x26\xd5\xa4\x44\x52\x4c\xe9\xa6\xdd\xb1\xac\x74\xb1\x79\xdc\x7f\xc3\xe5\x1c\x6b\xf1\x15\x8a\x0f\x02\xa8\xc6\x00\xab\x69\x20\xa1\x7a\x2b\xc5\x90\x2f\xb1\x9b\x76\xab\xe5\xf2\xbd\x9e\x5f\x97\x67\x7a\x24\xdb\x83\x6f\x4e\x8f\xb5\x3b\xe8\x8a\xac\x6a\x37\xed\x36\xb3\xcd\xbc\xff\xf3\x73\xdd\x6c\x66\x8b\xa7\xeb\xc9\x8f\xff\xac\x9b\x76\x6d\xa6\xf3\xba\xee\x0e\x5e\x76\xb3\xd2\xff\xde\xee\xf5\xab\xbf\xfa\xfa\xbf\xff\xe3\xaf\xfb\xb3\xae\x96\xc7\xba\xda\xcc\x74\x7b\x5b\x52\x74\xb5\x44\x01\x6a\x58\x00\xa9\x3a\x60\x83\x08\x5c\x1c\x97\x90\xa2\x8d\xcd\x76\x07\x5d\xad\x31\x7b\x89\x09\x34\xbb\x0a\x98\x3c\x01\x27\x4a\xe0\x92\xa1\x24\x35\x51\xf4\xd2\x4d\xbb\xea\x6b\x60\x97\x1b\xa8\x89\x08\x98\x6a\x02\xae\x8d\x20\x7a\x67\x92\xb3\xc5\x55\xe7\xbb\x83\x8e\x63\xa3\x14\x19\x21\x33\x25\xc0\xe2\x10\x58\xb3\x82\x8d\x25\x86\xa0\x86\x6d\xad\xdd\xd9\xd9\xb4\x2b\x2b\x95\x8d\x3e\xd8\x9c\xdb\xc9\xd9\x94\xc8\xa2\x9b\x76\x27\xc7\xf5\xad\x1b\xce\x20\x25\x93\xa6\x5d\xd5\xb9\xee\x6e\x98\xb3\xe9\x85\x11\x63\x16\x12\x6f\xc0\x6b\x0a\x80\xaa\x15\xb8\x4a\x03\x26\x2c\xd9\x88\x44\x6f\xe2\xdb\x46\x4c\x1e\x5b\x72\x39\x42\x6a\xd5\x02\xe6\xe4\x81\x5b\xb1\x60\x10\x25\x57\xd1\x52\x4a\xba\x6a\xc4\x91\xcf\xdf\x34\xe2\xf3\x99\xbe\xb8\x62\xc4\x87\x4b\x59\xd5\xc9\x9f\xec\x2e\xbe\xb1\x61\x6f\xea\x1f\xad\xaa\xae\xba\x83\x9f\x7c\x31\xed\xca\x72\x7e\x72\xb4\xf8\xd3\x59\xdd\x3c\xeb\x6f\x9f\xf5\x8f\xce\x37\xfd\xdd\x97\xe7\x9f\xd6\xbb\x07\x7b\x43\xcb\x66\xeb\xf0\x9d\x2c\x6a\x77\x36\xed\x9e\xcd\x6a\xd5\xc5\x8f\x8e\xfb\xab\x8f\xeb\xf9\x73\xeb\xe5\x6a\xb3\xbb\x74\x7e\xa1\x3f\xd6\x93\xdd\x09\xf3\x72\xe7\x67\xcf\x67\xeb\x59\x9e\xeb\xb5\x6f\x9e\x5f\x3d\xdc\xf9\xd4\xe9\xf9\xf5\x01\xcb\x99\xe4\x89\x6c\xbc\x69\xb9\xcb\x1b\x83\x96\x53\x4d\xd4\x7c\x82\xa2\xae\x00\xd6\xc0\xc0\x96\x2d\xd8\x92\x4d\x75\xda\x24\xd8\x76\x47\x96\xbb\x16\x7e\x9f\xca\xaa\xea\x62\xb6\x78\x3a\x1c\x7c\x3f\xff\xb7\x1b\x91\x57\x63\x8c\x59\x7c\x06\x8e\x8e\x01\x4d\xb5\xc0\x51\x02\x50\x42\x13\x72\xce\xb9\x65\xd3\x1d\x74\x1e\x35\xa7\xe2\x08\x2a\xe5\x76\x1e\x52\x94\x14\x5a\xc4\xd6\xa3\x85\x37\x1a\x87\x63\xc5\xa3\x31\x2e\xdc\xd4\xb8\xf5\xc4\x31\x99\x61\x8d\xdb\xe2\x29\xb4\x5e\xbe\x63\x01\xcc\x56\x81\x43\x1f\xc1\x0d\x35\x55\x94\x68\x3d\xde\x0f\xc0\x7b\x22\xeb\x2f\x87\x94\xdd\x4d\xbb\xd9\xfa\x89\x1e\x1d\xcf\xb7\x00\xbf\x59\x9d\xe8\x2d\x41\x0f\x31\x6a\x69\x68\xa1\x36\xaa\x80\x4e\x2d\x70\x92\x0c\xd1\xa2\x86\x48\x2a\x21\xda\xef\x00\xf4\x1c\x1a\x72\x38\x60\x48\x87\xd6\x1a\xe7\xf7\x19\xb2\xa2\xc7\x6c\x20\x92\x04\xc0\xe8\x2b\xb0\xf3\x0a\x89\x58\x4a\x62\x69\x21\xd4\x3b\x32\xe4\x75\xd0\x3b\x9d\x1c\xae\x66\xcb\xd5\x6c\x73\xfa\xb1\x50\xef\xe9\x6a\x79\x72\xfc\xf0\x74\x7b\xec\x51\xe6\x1a\x02\xca\x2e\x90\x52\x49\xe2\xc1\x67\x11\xc0\x66\x23\xb0\x0d\x05\x9c\x64\x97\x25\xfa\xaa\x35\x75\x1f\x1e\x4e\xc7\x9d\x78\x08\x74\x6d\x0c\x96\xbc\x1f\xf0\x1c\x47\x3e\x38\x1a\xf6\x9c\x91\x76\xbd\xe2\x39\x1f\xc4\x2b\x2e\x34\x73\xe1\x16\x87\xab\xe5\x5f\x68\xd9\x4c\xfa\x38\x5f\xdf\x70\x8c\xc3\x2b\x01\x7d\x51\xac\x8d\x0a\xeb\x69\xb7\x90\xa3\x6d\xc1\xb4\x91\xcd\x49\x2f\x78\x79\x69\xaa\x97\xbd\x93\x2d\x57\xdd\xc1\x16\x2f\x3e\xe9\x3f\x3f\xd2\x26\x27\xf3\x4d\x0f\x2a\x75\x3c\x24\x3c\x97\xf9\x49\xff\x8e\x1f\xea\xcf\x36\x93\x1f\x1f\x77\xbd\x6e\x6f\x88\xfe\x73\x9d\xcf\x97\x2f\x2e\x24\x8f\xac\xb0\x2e\x24\x3f\x5e\x4c\x0e\x57\xcb\xa7\x2b\x5d\xaf\x87\xa5\x7f\xba\x52\x5d\x5c\x11\xde\xfb\x68\x85\x54\x62\x00\xac\x9a\x80\x4d\x63\x20\x1b\xd5\x86\x56\x2d\xd3\xd5\x63\x7f\xb2\x3c\x3a\xee\xfd\xa2\xfe\xf6\xd7\xbf\xfd\xf5\xeb\x57\x7f\xfb\xf3\xe1\x57\x3c\x5c\x2d\x5f\x5c\xbe\x62\x54\x70\xbc\x79\xc5\x83\x55\x79\x36\x7b\xae\xb5\x3b\xfb\xe2\xd2\x03\xd6\x3a\xd7\xb2\xe9\x2e\x1d\x71\x64\xa4\x9e\xdb\xf3\x0a\x86\xbc\xd3\xa2\x9f\x69\xbd\x54\x8b\xcf\x2d\x93\x69\xd0\x28\x24\xc0\x2c\x15\x58\xbc\x40\xad\x96\x8a\x6f\xc1\x58\x73\x55\x2d\x7f\x34\x7b\xfa\x6c\xf2\xfa\xd5\x57\xff\x34\xc6\x9e\xa3\xe0\xfe\x8d\xec\x3f\xd6\x3a\x3b\x39\xda\x67\x4a\x39\xbd\x10\x9b\x58\x28\x06\x17\xc1\xb4\xde\x92\xd1\x56\x60\x32\x15\x92\x6d\x5e\x6b\x6a\xd5\x59\x7f\x45\xec\x0f\x96\x2f\xde\xa5\x61\x27\x54\xc5\x3b\x03\xd1\x53\x01\x34\x7d\xf5\x13\x39\xf6\xfa\x50\x4b\xa5\x36\xdd\x2a\xeb\x5c\xc3\x8f\x64\xa3\x93\x4f\xb6\x18\x53\xdf\xd2\xf2\x9b\x17\xec\x10\xa8\x3e\x99\x1d\xe9\xf6\xbd\x55\xd7\x65\x35\x3b\x3e\x47\xe3\xfe\x47\x5c\xb6\x23\xbf\x1c\x48\xd4\x7b\x31\x6c\xa8\xe4\x77\xec\x30\x85\x61\x0c\xc3\x94\x1a\xb1\x16\xc8\x68\x1d\x60\xe1\x1e\x05\x1a\x42\x8a\xe2\x42\xe0\x14\x59\xae\x65\xbf\x1a\x1b\xfb\xc8\x15\xd8\x22\xf5\xdf\x70\xc0\x58\x03\x48\x6b\x59\x73\x6c\x35\x56\xb9\x8a\x73\x23\x9f\xff\xe6\xec\x77\xf2\x74\x3d\x79\xfd\xea\x17\xff\xf0\x1e\xb9\xaf\xfb\xe9\x4f\xcf\xbf\xee\xd8\xec\x49\x84\xbd\x1f\x2d\xea\xec\x5c\xf3\xb3\x45\x99\x9f\x54\x5d\xbf\xa9\x42\x77\xc9\xd0\x99\x68\xa3\x54\x0f\x14\xd1\x02\xa2\x0d\xc0\xbe\x59\x08\xcd\x7a\xdf\x5a\xf3\xd5\x5e\x46\xc0\x36\x17\xd9\x56\x73\x26\x4b\xa0\xb5\x3a\x40\x69\xd4\x23\x49\x01\xf4\x51\xab\x73\xd6\x0a\xa6\xee\x8b\xb3\x5b\x37\x1f\x2f\xdf\x3e\x5f\x8b\xcd\x4b\x45\x07\xd9\x5b\x01\x94\xe2\x80\x6d\x33\xe0\x58\x85\x4d\xa1\xec\x51\x7b\xab\x68\xdf\xd9\x6b\xed\x0e\x9a\xcc\xd7\x7a\xf6\x76\xce\xdd\x48\x9e\xeb\x7b\xe6\x5c\x32\xd6\xc6\x4a\x0e\x72\x29\x11\x30\xf6\x8d\xbf\x13\x01\xf6\x56\x3c\xd9\x82\x28\xa6\x9b\x8e\xd5\x5f\x30\x89\xa9\x61\x00\xaf\xfd\x63\x1c\x14\xd8\x59\x0f\x2e\x27\x8e\x88\x46\xc5\x96\xde\xfe\x63\x7e\xed\x50\xa2\x47\x74\xe4\x78\xa0\xbb\x42\x8c\x2e\xec\xeb\xae\xc8\x79\xb4\xae\x58\xf0\xe4\x05\xd0\xb5\xdc\x77\x57\x0d\xa4\xe6\x90\x9d\x52\x2e\xb1\xde\x8f\xee\xea\x87\xfa\x62\xf2\x2d\xea\xfd\x8f\xde\x6a\x21\x06\xeb\xed\x40\xab\x85\x64\x4d\xd8\xd3\x6a\x91\x86\x66\x29\x5b\x70\x2e\x33\xa0\xf6\xa1\xe4\x9c\x80\x54\xe7\x7c\xed\xf3\x9b\x31\x77\x84\x51\xd7\xd4\xff\x99\xf6\xd1\x34\x79\x70\xf8\x78\x52\x75\x3d\x7b\xba\x18\x6e\x72\xbf\xfe\xcd\x10\xc3\x34\x2a\x44\x0e\x3a\x74\xa8\x42\xea\x21\x89\x58\x40\x13\x09\xb8\x50\x01\x63\x33\x62\x0e\x41\xc3\xb6\xf1\x1c\x15\x97\x07\x1d\x17\xa2\xd8\x42\x82\x6c\xb4\x02\x06\x2d\xc0\x5e\x3c\xb0\x36\xc9\xa9\x62\xd4\x46\x63\xe3\xf2\xa0\xb3\xc8\xc9\x79\x36\x60\xc5\x3b\x40\x57\x2b\xb0\xf1\x08\x62\x8a\x8a\x77\xb9\x44\x0d\x63\xc3\xf7\xa0\xd3\x20\xb1\xb9\x14\x01\x11\x0d\x60\x64\x0f\x2c\xd9\x83\x97\x46\x59\x82\x2b\x62\xed\x70\x23\x48\x29\x19\xe6\x9b\x6e\xe6\xad\x61\x72\x38\xec\x66\xa1\x79\xaa\x3e\x7b\x30\xb9\x46\x40\x31\x19\xb8\x18\x04\x24\x36\xc9\x15\x1f\x1a\xfb\xfb\xd1\xd1\x3f\x92\x8d\x64\x59\xeb\xe4\xf3\xdd\x93\x83\x4e\xf6\xcb\xff\xba\x2d\x87\xf9\x61\xdb\xf9\x51\xb5\xe3\x20\x58\x30\xa6\xe8\x07\xb0\xda\x26\x8c\x21\xec\xb1\x62\xe4\x94\xd9\x63\x06\xb4\x8e\x00\xa9\xd8\x1d\x87\x59\x7d\xc8\x21\x15\x75\xec\xe8\x9e\x14\x34\xa7\x93\xcf\x8f\x57\xb3\xc5\xe6\xbb\x68\xe6\x47\x26\xd6\x3b\x2a\x3c\x6e\xd3\xec\x8f\xac\x28\x6e\x5d\x2a\x78\x63\x88\xfc\x20\x88\x20\xfb\xc0\x7b\xdc\xaf\x1a\x8b\x81\x13\x68\x4b\x0d\xb0\xb4\x08\x1c\xb8\x42\x56\x72\x51\x43\xf3\xa1\x86\xfb\x51\x2a\x7c\x5f\xb5\x4e\xbe\x3f\x3f\x69\xed\x74\x18\x40\x7e\xf1\xaf\xdf\x3d\x15\xeb\x0c\x07\x1c\x0a\x79\x97\x98\x68\x4f\x7d\x90\xbc\x33\x35\xa0\x81\xd2\x7a\xe0\xa6\xe6\x7b\x44\xb3\x50\xc5\x38\x63\xa3\x16\x43\xf9\x7e\xd4\x07\x8f\xcb\x72\xb1\x9e\xd4\xe5\xe2\x0f\x36\x93\x3a\x5b\x1f\xcf\x65\x8f\xee\xff\xf2\x57\xb7\x2d\x0f\x46\xf5\x1d\x77\x54\x1e\x68\x45\x21\xdf\xe7\xf2\x60\x7a\x69\x36\x03\xb3\x67\x70\x85\x82\xb2\x2a\xa5\xa6\xe3\xcb\x83\x92\x59\x4b\x95\x02\x9e\xb3\x02\x56\x1f\x80\xa3\x75\x50\xb0\x12\x97\xc2\xc2\x9a\x86\xcb\x83\xe4\xd9\x99\x81\x2a\xd4\x5b\xe3\xc8\xec\x61\xfb\x46\xc6\xdd\x1e\xb6\xef\xd6\x51\x7b\x83\xed\xd3\xd5\x7a\xb9\x90\xf9\x7b\xd0\x7d\xa3\xa2\xf6\x3d\xe9\xbe\xc3\xd9\xe2\xcb\x0b\xaa\x65\x54\xb8\xbf\xa1\x5a\x9e\x2c\x27\x8f\x96\xa3\x98\x3e\x1f\x25\xd8\x86\xd0\x7c\x5f\x4d\xd6\x9c\x80\xb3\xab\x40\x6a\x24\x59\x11\x67\xf4\x2a\x33\xf4\x68\x39\x5b\x3c\x1d\xc3\xf1\x49\x96\x5a\x53\x06\xa9\xcd\x02\xd6\xd4\x80\xa3\xe9\x4b\x21\x92\x12\x8a\xb6\x60\xdc\x5b\x62\x17\x3a\xd9\x71\x7b\x37\xf9\xa1\x77\x30\x37\xbf\xfb\xfb\xaf\x76\x55\xfe\x08\xee\x66\x37\xdb\x1b\x1c\x41\x25\xa2\x7d\xfc\x73\x8a\x48\xc1\xe4\x04\xa5\x51\x03\x44\x53\x80\x63\x1f\x27\x14\x2c\xe5\x68\xbd\xb3\x7a\x3f\x72\xcd\xa7\xcb\x49\x5b\xae\x26\x32\x79\x21\xf3\xc1\xde\xf4\xf5\xab\xbf\xf9\xcd\x1d\x0c\xfe\x6c\xa0\x48\x43\x5a\xf7\xc1\x91\x1b\xd6\x7a\x66\x4e\xcc\x41\xa0\x35\x4e\x80\xea\xfb\x1e\xa7\x05\x20\x97\x34\x44\x2b\xbe\x25\xbe\x27\xd9\xe6\xe8\x78\xb9\xda\x4c\xfe\x70\xf2\xbd\x9f\xf5\x1f\x86\xf5\xfe\x77\xff\x78\xdb\x4c\x13\x54\x25\x85\x92\x00\x4b\xb0\x80\x29\x30\x30\x11\x02\xe6\x48\x3e\x2a\xb7\x88\x3c\x3e\xd3\x68\x09\xd5\xe5\x42\x50\x9b\xcb\x80\x2d\x46\x60\x8c\x09\x94\x52\xd1\x6c\x7c\x4a\x18\xc6\x67\x9a\x62\x6c\x88\xa1\x08\x64\xe9\x7d\x82\x3c\x02\x67\x25\x28\x45\x9d\xe3\x58\x45\xc2\x68\x1e\xe9\xdb\x34\xa2\xfd\x4f\xf0\x69\x30\xd3\x20\xc5\x3d\xf5\x4c\x4e\xd5\xb6\x62\x15\xd8\xd8\xbe\xc3\x6f\x01\xd8\x96\x0c\x12\x4c\x36\xd6\xa7\x92\xf9\x9e\x4c\x24\x1f\xcc\xf7\xe5\xa1\x77\x70\xb2\xa3\xb8\xf4\x03\x1b\xd3\xf4\x2d\xfa\x76\x3a\xb2\x7d\xb5\xce\x8d\xed\x4d\xad\xdd\x47\x0a\x7f\xa0\x9d\x90\xdb\x10\xaa\x23\x87\x73\x23\x67\x3e\xa3\x94\x3d\xd4\xfe\x38\x17\x30\x85\xa1\x91\xa8\x0f\xd6\xef\x05\xc7\x5c\x6a\xa0\x28\x20\x5b\xd7\x0d\x35\xf6\xb9\x95\xa0\x48\x42\xc6\xe8\x9a\xd1\x74\x3f\xba\xef\xad\xdb\x4e\x5e\xbf\xfa\xea\x9f\x7f\x3f\xe6\x09\xa3\xd0\xf6\xff\xe7\x09\xdf\xf9\x3c\x81\x13\xfa\x81\x12\x02\xc9\x70\xb4\x76\x4f\x94\x94\x90\x05\x9b\x07\xa4\xb8\x25\x09\x2a\xb0\xa4\x04\xad\x85\x6c\x22\x55\x31\x72\x57\x0d\xeb\xb5\x28\xf9\xde\xf1\xac\xac\x27\xbf\xfb\xfa\x5f\x7e\x3f\x82\x64\x14\x37\xfe\xe1\x82\x64\xa4\x77\xfd\x5f\x0f\x12\x6f\x83\x8f\x38\x14\x24\x18\x39\xf9\x3d\x4c\x5a\x31\xa5\x6a\xb1\x0c\x8e\x93\x07\x4c\x9a\x80\x51\x0b\x90\xa3\x9a\x8d\x10\x56\x9f\xef\x47\x15\xf4\xf0\x74\x72\xd9\x34\x7f\x74\x22\x77\x64\x79\x70\x57\xeb\xab\xae\x37\x6a\xc2\xc1\x4d\x2a\x8e\xb8\x67\xc0\x5a\xb8\x21\xb1\xa9\xe0\x29\x1b\x40\xef\xb7\x9d\x5e\x81\xc2\x36\x70\x21\xe1\x70\x9d\x5b\xb9\x4b\xd2\xfe\xdd\xb6\x1e\x4b\x47\x8e\xec\x23\x47\x0d\x3f\x3f\xa0\x7f\x8d\x84\x96\xff\x7d\x83\x82\x8f\x8d\x82\x8e\x1c\x0d\xce\xbe\xbd\x75\x18\xcd\x9e\x5e\x70\xa4\xdf\xee\x61\x1d\x6f\xed\xf5\xd7\x59\xc7\xcf\x96\x52\x8f\xe4\x78\x14\xdd\x38\xd2\x83\xbe\xcd\x76\xe1\x48\x5a\xfa\x72\xbb\x70\xb9\xe9\xa3\x76\xb5\xd1\x3a\x86\x77\x1c\x49\x45\xdc\x6e\xc3\x90\x31\xc5\x10\xb2\x00\x05\x21\x40\xae\x16\x98\x43\x03\x67\x43\x74\x0d\x2d\xf9\x44\x03\x1b\x86\x7b\x19\xc8\xcb\x0d\xb5\x71\x5e\x7e\xae\xf5\x6d\x38\x7d\x83\xce\xdf\x56\xca\xc8\xb5\x83\x8b\x73\xf7\x85\xe3\xb6\x6e\xfc\x66\x8d\x8c\xe4\x91\x2e\xe9\x63\x59\x7f\xb9\xeb\xdb\x06\x45\x5f\xd9\x5a\x1c\x39\x0a\xb9\x10\xfc\xf0\xe4\xe9\x6e\xbf\xec\x1d\x5a\x1e\x09\x12\x17\xbe\x7d\x31\xde\x7d\x1f\xdf\x1e\x49\x5d\x5d\x9c\x7a\xf7\x8e\x89\x1d\xd6\xc6\x35\xd9\x23\x07\x30\xd7\x64\xbb\x51\xb2\x47\xee\x7e\x5c\x93\xed\xdf\xa5\xed\x91\x29\xe3\xf6\x7b\xad\xa3\x46\x48\x6f\xce\x7c\x68\x47\x6f\xb5\x8e\xa2\x0c\xaf\x48\xde\xa3\xe3\xab\x1b\xad\x25\x38\x1b\x9d\x0a\x50\x95\x08\x58\x7b\xd0\xb3\x1c\xc0\x47\x17\x62\x65\xd5\x24\x57\xc7\x2c\x87\x83\xaa\x7d\xe7\xaa\xe9\xaf\xfe\x73\xf4\xc4\xa2\xcf\x66\x86\x07\xea\x3c\xef\x8c\x33\xb8\x27\x9b\x29\x97\xa8\x68\x0c\x14\x14\x01\x74\xb1\xc7\x6d\x65\x10\x8c\x36\x93\xb2\x75\x72\x57\xdc\xf9\x20\x3d\x94\x3f\x5c\x65\x7f\x1f\x69\xa1\x8f\x53\xf7\x7d\xfb\x8a\x6d\x64\xdc\x8f\x02\xe3\x41\xd6\x86\x5c\x60\x1c\xe0\x36\x91\xd0\x87\xb0\xa7\x49\x69\x41\x52\xb5\x9a\x21\xf8\xa0\x80\xad\x50\xaf\x9c\x08\x85\x9d\xa4\xe8\xd9\x86\x48\xf7\x63\x3f\xec\xc1\xe1\xe3\xc9\x0f\xe4\x54\x57\x7b\xfe\xc7\xee\xdf\xef\xc7\x66\xd8\xed\xff\xd1\xcb\x04\x13\x06\x9b\x4c\x1b\x2c\xba\x6b\xe0\xf3\xc5\xd9\xff\x04\x00\x00\xff\xff\x8b\xec\xf1\x11\xd0\x3c\x00\x00")

func templatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesJson,
		"templates.json",
	)
}

func templatesJson() (*asset, error) {
	bytes, err := templatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.json", size: 15568, mode: os.FileMode(420), modTime: time.Unix(1607632586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates.json": templatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates.json": &bintree{templatesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

