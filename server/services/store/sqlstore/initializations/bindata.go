// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/templates.json
package initializations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7c\x4f\x8f\x9c\xb9\x71\xfe\x57\x79\x7f\xbd\x87\x1f\x10\x4c\x21\x64\xb1\x48\x16\x75\xd3\xae\xec\xb5\x80\xf5\xae\x6c\xc9\x71\x02\x7b\x61\xf0\x4f\x71\xd4\xde\x9e\xee\x41\xf7\x3b\x92\x07\x82\x4e\xb9\xda\xb1\x63\x18\x30\x92\x35\xb2\x46\x8c\x04\x3e\x3a\x48\x0e\x41\x82\x5c\xfc\x51\xfc\x05\xb2\x1f\x21\x60\x8f\x56\xea\x99\x79\x5b\xa2\x66\x56\xab\xb1\x13\x48\x87\x9e\x79\xbb\x49\x76\xd5\xc3\xa7\x9e\x2a\x16\xe7\xc9\xec\x91\xac\x37\xf3\xd5\x72\x76\x4b\x1f\xcc\x4a\x1c\x65\x76\x4b\x3b\xe5\x39\x20\xb1\x65\x4b\x07\xb3\xb4\x58\xe5\x4f\x36\xb3\x5b\xdf\x7b\x32\x9b\x97\xd9\xad\x19\xa6\xe4\x4b\x36\x05\xb2\x71\x11\x48\x94\x02\x16\x55\x21\xba\x62\x74\xcc\xca\x9a\xec\x67\x07\xb3\xe3\xb8\x96\xe5\x78\xb7\x7d\x62\x76\x30\x5b\xaf\x56\x67\xaf\x3b\x3f\xbd\xc9\x0f\xe5\x28\x6e\x17\x35\x9e\x1e\xcb\xec\xd6\x2c\xad\xe2\xba\xcc\x0e\x66\xe3\x7c\x5c\xb4\x9f\xef\xad\x57\x3f\x94\x3c\x0e\x0f\xe2\xe6\x93\xcd\xec\x60\x56\xe7\xb2\x28\x9b\xd9\xad\x27\xb3\x1c\xd7\xe5\xde\x7a\x75\x2c\xeb\x71\x2e\x3b\x0b\x8f\xc1\x63\xc9\x3e\x82\xad\x94\x81\x6c\x41\x60\x45\x04\x9c\x91\xb3\x0b\x5e\xfb\xaa\x67\x07\xb3\x65\x3c\x6a\xe3\xdf\x1f\xe3\x78\xd2\x06\x5e\x1d\x8f\xf3\xd5\xf2\x6c\x9c\xbc\x5a\xac\xd6\xb3\x5b\xb3\xe3\xf5\xea\xf8\xbd\xf6\xfa\x8e\xd4\x78\xb2\x18\x67\x07\x67\x53\x10\x79\xc9\x95\x34\x94\x6a\x0b\x10\x8a\x06\x0e\x31\x81\xd7\x24\xce\x5b\x89\xce\xb7\x29\x1e\xc5\xc5\x49\x9b\xe3\x43\xf9\xd1\x38\x7c\xe7\x78\xf6\xf4\x60\x62\xe8\xbf\x92\xc5\x62\xf5\xf8\x8b\x91\x4b\xf1\xc9\x44\x1f\x40\x12\x16\xa0\x60\x2c\x70\xb0\x01\x30\x28\x1b\x62\x09\xd6\x9b\xb8\x33\xf2\xdd\xe5\x70\x6f\xbd\x3a\x5c\xcb\x66\x33\x3d\xfa\xfb\x6b\x91\xe5\xce\xe0\x31\x61\x2a\x10\xb2\x77\x40\x45\x02\xb0\xaa\x0c\x56\x7b\xd1\xae\x16\xcd\x76\x77\xd9\xef\xad\x8e\x8e\x17\x32\x4a\xf9\xfd\xaf\x7f\xff\xeb\xcf\x3f\xfb\xbb\x1f\x4f\x4f\xf1\xee\x7a\xf5\xf8\xf9\x14\xce\x8a\xcd\x21\x1a\x30\x29\x46\xa0\xaa\x3d\xb0\x76\x19\xb0\x4d\x1c\xbd\x29\x52\xc2\xce\x14\xb7\xd7\xf9\xe1\xfc\x91\x94\xd9\xd3\x8f\x9f\x23\x60\x23\x0b\xc9\xe3\x76\xae\xb3\x55\x9b\xe2\x18\x53\x05\x51\x9e\x80\x42\x09\xc0\xa5\x5a\xf0\x06\x55\x40\x9d\xb1\xa0\x79\xe1\xcf\x7b\xeb\xf9\x6a\x3d\x1f\x4f\x5f\xe5\xd1\x6f\x4b\x79\x6e\x16\x93\x6a\xb2\xaa\x42\xb5\x2e\x00\xa5\x58\x80\xa3\x89\x50\x8a\xb6\xd9\x54\xa7\xb4\xda\x35\xcb\x37\xe6\x87\x0f\x87\xcf\x3f\xfb\xc5\x3f\xf5\xf8\x93\x7d\xb5\xc1\x33\x41\x62\x1b\x80\x32\x12\xb0\x24\x01\xed\xb3\x77\x4e\x14\xeb\x52\x76\xc6\xfe\xa6\x94\xf9\xc9\xd1\x3e\x57\xc6\xd3\x2f\x86\x0d\x1c\xad\x77\xe8\x41\xd5\xe6\x49\xaf\x0b\xb0\x55\x05\x82\xae\x46\x4a\xa8\x05\xb5\xd9\x19\xf6\x83\xd5\xe3\x97\x59\x18\xa3\x2d\xd1\xa0\x02\x6f\x6c\x06\x52\xc1\x00\x7b\xf6\xcd\x1e\xa2\x6d\x2e\x55\xb6\xc6\x7a\x66\xe1\x3b\x71\x94\xe1\xbd\xb5\xc4\x71\xfb\xdb\x17\x56\x7e\x31\x41\x3e\x7b\xfa\x60\x7e\x24\xdb\x79\x8b\x6c\xf2\x7a\xbe\x7d\xe3\x19\x4f\xcc\xf3\xf6\xd5\xe7\x9f\xfd\xcd\xcf\xdb\x4f\x9b\x07\x72\x74\xbc\xd8\xb2\xd2\xb8\x3e\x91\xa7\x07\xcf\x46\xb8\x3d\x9e\xd1\x94\x43\xed\x9d\xb6\x06\x0f\x66\x27\xc7\xe5\xdc\x03\x44\x46\x0a\xae\xcd\xd1\xb0\xda\x1e\xa8\xe7\x5f\xcc\xd4\x68\x51\x49\x02\xa3\x72\x01\x62\x8b\xc0\x18\x22\xa4\x68\x52\xf6\xc2\x2c\xe8\xf6\x73\x58\xe7\xa7\x5f\xcd\x61\xdf\x14\x19\xe7\xcb\xc3\xe1\xc3\xd5\x28\x7d\x1c\xe6\x33\x6a\x14\xcf\x10\x0c\x59\xa0\xec\x14\xb0\x4e\x16\x54\x52\x62\x7c\x16\x72\xa6\xbe\xf0\xc8\x83\x36\xed\x2b\xf0\x7e\x1e\x96\x46\x97\x68\x55\x8e\x50\x75\x0c\x40\x05\x35\xb0\x33\x0e\x74\x23\x6d\xf6\x59\x47\xdc\xc5\xcf\xed\x32\x7c\x63\x95\xf7\x6c\xff\xf6\x96\x2f\x76\x92\x54\x67\xb4\xcf\x20\x59\x6b\x20\xad\xda\x4e\x72\x09\x24\x92\xd3\x06\x55\x35\x01\x77\x86\xbd\x3f\xc6\x65\x39\xd9\xc3\x8b\xf7\x4e\xd6\xc7\x8b\xe7\x23\x7b\xa5\x2a\x9b\xca\xe0\x22\x69\x20\x97\x0b\xb0\x17\x04\x6b\x44\x15\x95\x34\xe6\x6d\x3c\xf9\x62\xe4\xef\x8a\x7c\xb2\x38\x1d\xee\x9f\x2e\xf3\xcb\x80\xaf\x4d\x41\x13\x28\x82\x24\x2b\x40\x15\xb1\x45\x09\x04\x67\xb5\x95\x4c\x3a\x53\xa4\x9d\x50\x71\x72\x74\x14\xd7\xa7\x7b\x30\x3f\xca\x8f\xc6\x57\x80\xfd\x97\x3f\xff\xef\x7f\xff\x69\x0f\xde\xbd\xf6\xda\xb9\xe0\xdc\x45\xbc\x7b\xed\x8d\x33\x81\xf5\x34\xde\x5d\x12\x13\x72\xd6\x50\xb1\x6d\x64\x9f\x2a\x70\xa1\x00\xd5\x09\x45\x56\xb9\xb2\xc7\xfd\x78\xef\xfc\x74\x47\xcc\x96\xf5\x66\xb5\x8c\x8b\xe1\xfd\x55\x5c\x74\x06\xed\xea\x6a\x4e\x89\x21\x47\xeb\x80\x92\x37\xc0\xa6\x6d\x3d\x4f\xc6\xa7\x10\x9d\xf3\xe5\x75\x83\xf6\x0e\xc5\xa7\x6a\x31\x55\x71\x10\x73\xd3\x04\x81\x18\x18\x75\x6d\x73\xc4\xa8\xb3\x4f\x8a\x76\xc3\xea\x83\xd5\x70\x67\xd5\x43\xef\xde\x67\x6b\x42\xac\x60\x54\xc8\x40\x25\x69\x60\x83\x01\x0a\x2a\xa9\x5e\x82\xc4\xbc\x4b\xef\x77\x56\xf3\xe5\x61\x47\xa0\x0e\x9c\x8a\xc4\x46\xef\x39\x0b\x50\x2e\x02\x5c\xb2\x03\xd4\x18\x4b\x31\x4e\xdc\x39\x15\x70\x67\xb5\x94\xe1\x2c\x40\xbf\x24\x8c\x06\x8f\xb6\x68\x82\x62\x23\x03\xb1\x58\xe0\x22\x1a\x5c\xe5\xac\x14\xc5\xe0\x58\xbd\xb0\xf0\x7b\x71\x94\xc3\xd5\xfa\x95\x61\xf4\xfc\x2e\x35\x48\x36\x1a\x2c\x50\x1d\x33\x90\x33\x09\xd8\xd7\x16\xf2\xbc\x26\xcc\x3a\x99\xb0\xbb\x4b\x3f\x98\x57\x19\xee\x7f\x32\x5f\x2c\x7a\xd4\x0b\xab\x24\x5b\x2d\x51\x9b\xb8\xa3\x80\x0c\x4c\x1c\x80\x93\x42\xcd\xaa\x52\xb0\xb4\x33\xf8\xd7\xe7\xcb\xb8\xcc\x32\x3d\xf0\x47\xeb\xb8\x3c\x7c\xbe\xec\x5a\x93\xa9\xc1\x6a\x48\xe4\x2b\x90\x6e\xcb\xae\xba\x00\x1a\x76\xce\x79\x64\xa5\x78\x57\x00\x48\x5c\x8c\x0f\x5f\x6a\x6b\x97\x34\x52\x48\x90\xb2\x66\x20\x5b\x33\x30\x07\x81\x24\x99\xb8\x66\x61\x25\x3b\xf4\x7d\xe7\x44\x86\x16\x54\x5f\x53\x84\x86\xa8\x82\x12\x63\x20\x69\xad\x80\xd0\x31\x70\x50\x01\xb4\xc1\x6c\x95\xc2\x1c\x94\xec\xac\xfa\x5b\x7a\xda\x14\x17\x46\x55\x91\x31\x78\x5f\xa1\x6d\x18\x20\xeb\x13\x30\xe9\x04\x82\xc9\x57\xef\x6a\xb2\x68\x77\x47\xc5\xae\x51\x9d\x78\x6d\x82\x10\x58\x63\x1b\x30\x52\x02\xce\x4a\x83\x4f\x0a\x43\xb4\x3e\xb1\xda\x05\xf4\xb7\x4c\xd7\xa8\xc5\x1a\xaf\xb3\x33\xe0\x5c\x5b\x2b\x35\x0b\x78\xc3\x90\xa9\x64\x4a\x12\x89\x69\x37\x8a\x7d\x8b\xa6\x7c\xf6\x12\xc6\xfe\xc3\xa7\xbf\xeb\x26\x6c\x8b\x9a\xd1\xab\xcb\x84\x6d\xdd\xf6\xff\x34\x61\x07\x43\x35\x60\xf2\x10\x6a\xd1\x40\xa9\x29\xaf\x9a\x35\x28\xa2\x98\x4a\x94\x9c\x73\xd8\x4f\xd8\x9d\x9f\x7e\x0d\xc2\xee\xcf\xb2\x8a\xf7\xbe\x09\x21\x60\x8f\x0c\xa4\x8a\x06\xf6\xd1\x81\x0d\xa4\x5c\x4a\x29\xd5\xa4\x5e\x97\xb0\xef\xcd\x97\x9f\x3c\xa7\x12\x92\x14\x32\x5a\x28\xb6\xf9\x76\xab\xfa\x6d\x10\xa8\x9e\x6a\x4b\x27\x8d\x12\x7f\x15\xc6\x2e\xc6\x47\xa7\x2b\x41\x35\x06\x1b\x63\x37\x02\xc1\x02\x56\x54\x0c\x3a\x46\x54\x72\x15\xc6\x2e\x31\xc5\x52\x42\x82\x58\xaa\x06\x2a\xa1\x02\x7b\xd5\x32\x4f\x1b\xb3\xcb\x52\x9d\xc2\x5e\xc6\x7e\x19\x22\x7f\xf5\x8b\x4e\x44\x3a\x54\xc1\x58\xab\x2f\x49\x08\x87\xda\x04\x6b\x71\x0f\x22\x8b\xaf\x6c\x3c\x17\x60\xbd\x55\x9e\x8c\xc0\x54\x1c\xc4\x5a\x93\x24\x5f\x8b\x2f\x71\x3f\x22\x3b\x3f\xfd\x6a\x44\x7e\x7b\x15\xcb\x51\x3c\xee\x82\xa2\x55\x5a\xfb\x62\x11\x52\xce\x1e\xc8\x5b\x05\x8c\x31\x02\x1b\x1d\x8d\xd5\x99\x28\xbe\x36\x14\x2f\x30\x0d\x67\x6b\x7d\x75\x01\x92\x92\x02\xe4\x24\x03\x9b\x68\x80\xa5\xc6\x14\x0a\x79\xa9\xbb\xac\xf8\xe1\x6a\x1c\xee\x8f\x71\xdd\x32\xa4\x0e\x4c\x4a\x76\x05\x53\xb6\x50\x2a\x26\xa0\xea\x3d\x30\xf9\x00\x62\x43\x96\xa4\x4c\x08\xe4\xae\x9c\xf4\x33\x05\xef\x5c\x8a\x60\x5d\xb4\x40\xdc\x36\x2a\xbb\x0a\xa8\x9d\xc7\x4a\xda\x9a\x60\x27\x92\xfe\x57\xea\x09\x54\x5e\xfb\x58\x0c\x58\xdf\x14\x39\x69\x07\x6c\x6a\xd3\x13\xda\x98\x5a\xab\x29\x5a\x5f\x27\x45\x21\x24\x89\x56\x0c\x84\x18\x35\x90\xf2\x16\x38\xdb\x0c\x4a\x27\xa2\xe4\x9a\x06\xda\x0d\xf7\x5f\x3b\x9e\xe7\xe1\x0f\x9f\xfe\xae\xc3\x22\x4e\x24\x06\x97\x5b\x3a\xee\x34\x50\x68\x61\xc3\x5a\x6a\xaa\xd3\x1a\x2f\x5c\x3d\xed\x86\xfb\xc6\x89\x2d\xdf\xff\xed\xf4\xd0\x3b\x2a\x53\xd7\x92\x92\xd5\x16\xa4\x14\x04\x8a\xd5\x02\xab\x9a\x81\x8c\x97\x82\xa8\x75\xa4\xdd\xe2\xc7\xbb\x27\x87\xc3\xe7\x9f\xfd\xec\x1f\x5e\x66\x65\xa7\x02\xdb\x4a\x0e\x8c\x34\x2b\xb3\x93\x26\x5c\x0d\x60\x0a\xec\x89\x94\x44\x9d\x77\xb0\x7d\xbc\x9e\x2f\xc7\xd7\xc4\x76\x56\xda\x79\x97\x5b\x5e\xbb\x8d\xf8\x86\x80\x93\x58\xc8\x59\x10\xd9\x97\x18\x5d\xde\x4d\xda\xb6\x73\x0c\x7d\x6a\x42\x0a\x45\x6b\x48\x01\x39\xd5\xf6\x8d\x4e\xc0\x6c\x18\x30\x5b\x27\x2c\x62\x43\x95\xcb\x63\xf7\x69\x0a\x4d\x1c\xd0\xb0\x02\x1d\x1b\x93\x63\x29\xc0\xca\x10\x44\x95\x25\x1a\x6c\x29\xba\xbb\x3c\xb6\x79\x99\xb5\xab\xaf\x26\x16\x42\x48\x46\x47\xa0\x98\x11\x58\x57\x05\xc8\xd2\x12\x20\x9b\x0c\xc9\xb5\x4a\x4d\x39\xb1\xe4\x12\x33\x18\x4e\x02\x54\x8c\x03\xf6\x1a\x9b\x62\xb1\x9c\x33\x47\x96\x5d\x84\xdc\xd3\xdd\x85\x26\x71\xd1\x57\x0c\x1e\x88\x9a\xb9\x3d\x1b\xe0\x98\x0c\x98\x58\x6d\x8a\x0e\x73\xd4\xbb\x45\xac\x7b\x7b\x6c\xbc\x5b\x64\xca\x0e\xb5\x47\x89\x60\x4b\xf4\x40\xa5\x91\x9e\x66\x07\xc6\xa3\xf3\x85\x45\x42\xdc\x0d\xc1\xf7\x26\x4d\xfb\xf2\x84\xf8\x3f\xba\xa3\x19\x5a\xb4\x8a\xe9\x72\x34\x33\xa8\x50\x91\x9a\x8e\x66\x4a\xf9\x1c\xb3\x73\x40\x31\x59\xa0\xd4\x42\x83\x4d\x08\xa8\x42\x09\x62\x6d\xcc\x2a\x9f\x8f\x66\x9d\x85\xeb\xeb\x17\xba\xf3\xf9\x80\x77\x5f\xc6\x71\xbe\x3c\xdc\x0c\xdf\xf9\xcb\x73\x41\xef\x45\xa5\xec\xd3\x33\x5b\x1d\xef\x44\xc0\x27\x7d\xc5\xee\xee\xb2\x72\x57\xa9\xb5\xb3\xa8\xf9\x74\xaa\x8a\x17\x82\xd5\x34\x55\xc5\x53\x64\x83\x0a\xd3\x4e\xd4\xd9\x58\x57\x9b\xf6\x43\x8e\x40\x49\x0b\xb0\x6b\xab\xaa\x24\xa1\x50\xf4\x7a\x1b\x09\x6e\x80\x13\x5b\xa8\x98\xf2\xde\x04\xc4\xaf\xe8\xc8\xce\x93\x87\x37\xed\x48\x24\x65\x91\x26\xb4\x25\x92\xd6\x0a\xcd\x3e\x47\x16\x32\x94\x14\x78\x1b\x1d\x90\x37\x05\x18\x8d\x40\xb0\x1c\x73\xe0\x58\x9d\x2b\x6f\xc9\x91\x8f\xe6\xf2\x78\xc7\x91\xef\x9e\x0e\x3b\xec\x7e\x5e\x82\x7e\xb4\x2e\xb2\x3e\x2b\xfd\xe5\xd5\xe2\xe4\x68\xf9\xdd\x79\x19\x1f\xb6\xc7\x4f\xdb\x5b\x17\x63\x7b\xfa\xe4\xd9\xab\x67\x35\xc2\xe6\xe9\xf8\x8c\x00\xe3\xb2\x89\xc2\xd9\xe1\x7a\x75\x72\xfc\xee\xe9\xdd\xd7\x38\xe2\x78\x38\x2f\x45\x96\x1f\x6d\x99\xf4\x6e\x5b\xd0\xf7\xfa\xce\x5b\x3e\x3e\x98\x6d\x56\xeb\xf1\xa3\xdd\xaa\x65\xfb\xc2\x0f\xce\x6b\xef\x47\xf3\xcd\x3c\x2d\x64\x77\xfc\x8f\x9f\xff\xf6\x99\xf0\x3e\x7d\x36\x6f\xd7\x8a\x3f\xde\x5b\xc8\x37\x53\x85\x7c\x6b\xdc\xbe\xac\xc4\x55\x63\x8b\x49\x06\x54\x2a\x1e\x28\xaa\x6d\xfd\x80\x80\x2c\xab\x80\xd9\xb8\xca\xe6\x66\x50\xc0\x9d\x38\xc6\x14\x37\x32\xdc\x3f\x7b\xe7\x24\x97\xff\xfc\xbf\xae\x4a\xe4\x5f\xee\xfe\xef\x3a\xf9\x9a\x24\xf2\x96\x55\x18\x3f\x91\x5b\x06\xf2\xce\xd1\xb4\x17\x53\x28\xba\xe6\x46\xdf\x4a\x37\x49\x5f\x1d\xb0\xce\x09\xa2\x53\x49\x69\x13\x72\xe2\x1b\xb2\xff\x6f\x2f\xf6\xd5\x42\xf6\xef\xfe\xbe\x63\xb4\x5b\xda\x87\x83\xd9\x0f\x7e\xf0\x6c\x26\x64\x75\xd0\xe9\x7b\x8d\xd8\xeb\x58\xad\xd5\x6b\x71\xd1\x65\x62\x79\x05\x65\x8c\x31\x6d\xab\xbe\xaf\x43\x19\x9d\xe7\xf2\x9d\x5c\xd8\x65\xec\x29\x02\x42\x74\x14\xdc\x14\x01\x19\xa7\x8d\xc5\x69\xe8\x66\x95\x8b\x64\xcd\x80\x1c\x0c\x50\x90\x00\x4c\x92\xc1\xa2\x2d\x49\x45\x4b\xc5\xa4\x9b\x01\xdd\x77\x4f\x87\xe7\x25\x8e\x37\x1e\xb8\x3a\x7d\xfa\xda\xf8\xba\x42\x48\x9a\xf6\x35\x91\x0f\x13\x49\x03\xa2\x65\x4f\x7e\xda\xd7\xd5\xc5\x50\xb4\x24\x70\xc6\x09\x50\xcd\x16\xd8\x68\x0f\x99\x31\x06\x6f\x58\x3b\x6f\x6f\x46\xb0\xb9\x7d\xef\xee\xf0\x41\x3c\x95\xf5\x74\x98\xf9\xf1\xbf\xdd\x8c\x30\x73\x75\x99\xa9\x9c\x72\x93\xfe\xd3\x4e\x13\xee\x49\xfa\x5a\x74\x09\xe8\x3c\xa4\xad\x58\xa0\xec\x81\x0d\x22\x20\x92\xa8\x5c\x51\xbc\xe3\xf3\xfe\xeb\x3c\xe9\xbf\x7e\x67\xc0\x05\xff\x7d\xb8\x7a\x34\xe0\x9e\x74\xef\x3f\x2f\xf9\xae\xeb\xb4\xfa\xd6\x6c\x5b\xeb\x1a\x16\xf3\xc3\x87\xe3\xff\x9b\x1d\xf4\xb5\x12\x74\x1e\xdd\x5f\xf6\x91\xd7\x1e\xd1\xa0\xb3\x13\x27\xd5\x64\x02\xaa\x7d\x52\x80\xb5\xca\x3a\x04\x90\xd8\x94\x87\x53\x0c\x9c\x94\x01\x54\x51\x52\x40\xae\x7a\x7b\x7c\xf0\x36\x7c\x74\x99\x4f\xc7\xb3\xe2\xe5\x1b\x67\xd3\xce\xae\x8f\xaf\x82\x4d\xfb\xc0\x76\x99\x73\xb7\x9d\x0b\x5e\xa9\x4b\x39\xbe\xd7\xac\x58\xe1\xde\x63\x07\xd6\x16\x7d\x75\xe0\x82\xa9\x40\xd4\x94\x68\x0d\x15\xaa\xc7\xa0\x50\x51\x8b\xd9\x37\x03\x0f\x0f\x9a\xf4\x19\x9e\xfd\xb2\x5b\x1b\xf6\xed\x5d\xd7\x24\x5e\xdf\x86\xd5\xc6\x9e\x97\x91\x37\x4f\xf0\x75\xc2\xf9\x1a\x48\x0b\x4a\xa9\xa9\x1e\x19\xb2\x9e\x69\x4f\x8f\x0c\x2a\xad\x12\x11\x43\xc6\x80\x2d\xb4\x25\xe0\x98\x3c\xe4\xe2\xac\xd3\x39\x65\x95\x2e\x54\x93\x3a\xfb\x62\xae\xdf\x47\x73\xb1\x24\x38\xc6\xf5\x38\xc4\xa1\xc4\xf9\xe2\x74\xf8\xe1\xea\x64\xbd\x8c\x8b\xa9\x68\xf1\x87\x5f\xfd\x64\xb2\x36\xd8\xd3\x53\xd3\xdd\x1b\xd3\xd5\xd3\xd0\xdd\x3f\xd0\xd5\x8d\xd2\xd9\x50\x32\x15\x95\xac\xb5\x9e\x1a\x04\x2e\x1d\xc7\x5b\xd6\x4e\xf3\x1e\x6c\xb8\x9c\x23\xc7\x0c\x39\x11\x03\x45\xe3\x81\xd9\x12\x30\xa5\x28\x21\xe9\xc0\xc4\x6f\x09\x1b\x97\xa3\xd2\xe6\xab\x53\xf9\x7d\xcd\x59\x5f\x49\x5c\xea\x6c\x63\xea\x42\xeb\x14\xa9\x58\x44\x6b\xfc\x44\xf8\xb2\x56\x33\xba\x3d\x29\x83\xe1\x4a\x49\x94\x87\xaa\x6b\x6c\x7b\x28\x03\x67\x6d\x21\x06\xe5\x95\x72\x35\x44\x6b\x6f\x06\xa9\x7c\x20\x71\xbd\x1c\xc6\xd5\x70\x1c\xcf\x8e\x0a\xa7\xb4\xe7\x6f\xaf\xca\x25\x9d\xfd\x70\x9d\x5c\xd2\xd9\xe1\xf4\xc6\xb9\xa4\x65\x33\xf6\x52\xc5\xc0\x6b\x4b\x41\x1b\xde\xa3\x70\xad\xd2\x26\x73\x6c\x0c\x22\x2d\x37\x52\x15\x38\x18\x04\xad\x03\x05\x15\xb5\x56\xe5\x86\xc4\x99\x8f\x8e\x65\x39\xac\x65\x9c\xaf\xe5\x48\x96\xe3\x10\x73\x5e\x9d\xec\xc3\xc6\x4f\xff\xf9\x4f\x31\xce\x74\xf5\x16\x4e\x63\x83\x9d\xb5\x13\xd9\x8f\xb5\x4a\x29\xda\xd3\x97\x6e\x99\xad\x66\x16\x10\xef\xb1\x65\x3f\x15\xd8\x47\x04\x76\x46\x71\xae\x99\x7c\x56\x37\x03\x1b\xdf\x3e\x59\x0e\x66\x18\xe7\x47\xb2\x19\xe2\xf0\x58\x64\xf2\x7c\xeb\xf3\xcf\x7e\xfa\xd7\x37\x03\x16\x9d\x8d\x86\x9d\xb0\xe8\x6a\x0c\x9d\x84\x05\x19\xd4\x97\xcf\xc7\xb6\xb0\x30\xac\xf7\x50\x46\x4c\xd6\x19\x89\x09\x12\x29\x0f\x64\x28\x02\x7b\xcd\xa0\xb9\x64\x66\x2f\x4a\x61\xbd\x31\xf2\xa3\x9c\xc8\x50\xce\xba\x56\xdf\xfc\xf9\x58\x5f\x3f\xed\xcd\x11\x20\x93\xca\xc2\x22\x86\x69\x49\x6a\xd8\xd8\x3d\xca\x42\xf9\x14\x6d\x34\x0a\x8c\x04\x07\x24\x52\x80\x4b\xac\xc0\x96\x72\x52\x31\x7a\xa3\x2e\x5c\xc3\xeb\xec\x0a\xbd\x7e\x17\xe9\x45\x4c\x34\x63\x0e\x7f\xf1\x7a\x89\xf1\x9b\xcd\x5a\xbf\xa4\x32\xf2\x59\x27\xe5\xc4\x69\xd7\xf3\x07\x93\x9e\x13\x09\xb6\x9a\x00\x59\xb0\x69\xa1\xa6\x5e\x34\x6b\xd0\x39\xa9\x82\x52\xa3\xd3\xf5\x2d\x79\xee\x02\xc9\xbf\x1f\xd7\x45\x96\xf3\xe5\xe1\x9e\x32\xf2\xbf\x5e\xe2\xf6\xae\xee\xdf\xce\x26\xde\xc9\xf3\x45\x43\x4a\xe1\x64\xef\xaa\x65\x1f\xf6\x14\x7e\x2d\x1a\xd2\x98\x35\x18\x6b\x22\x10\xd6\xd4\x2c\x5e\x21\x96\xe4\x12\x8a\x4d\xd9\x97\x9b\x61\xf1\x0f\xe5\xf1\x70\x8d\x66\x91\x37\x6e\x7e\x22\xa7\xcd\x25\xaa\x6a\x0f\xac\x56\x6e\x8f\xf9\x7d\x51\x9a\x1c\x07\x90\x1a\x2a\x50\xae\x1e\xd8\x71\x81\x24\x16\xbd\xb8\x6a\x5c\x71\x37\xc3\xfc\x5f\x17\x29\xc3\xd7\x17\x27\xb5\x9e\x4e\x43\xfe\x67\xff\xf2\xd5\x43\x1e\x15\x3b\x9a\x3a\x52\xc7\xc0\xd6\xee\xb1\x79\xf0\x64\x9d\x4a\x01\x72\xb5\x15\x88\x54\x6e\x49\x8d\x02\xb4\x4e\xdb\xe4\xb5\x41\x2d\x37\xc3\xe6\xef\xaf\x86\xba\x5a\x37\x11\x19\x17\x7b\x44\xe4\xdf\xfe\xe6\x2d\x10\x8d\x76\xd6\x5f\xd2\xef\xed\x81\x71\xb8\xef\x34\x98\x42\xa8\x96\x25\x43\x22\x8d\x40\x99\x09\x38\x57\x82\xe0\x23\x3a\xc7\xc1\x73\xbc\x40\x34\x9d\x8d\xf1\xd7\x6f\xa4\xbf\x18\x94\x4f\x0e\x37\x67\x4d\xc6\xaf\x51\xac\xee\x28\x2b\x3f\x99\xe5\xd5\xb2\xcc\x9f\xc5\xe7\xf9\x32\x2f\x4e\xca\xf6\x6e\xeb\xf1\xf3\x68\xda\xdf\x23\xbe\xed\x20\x3d\x3b\x75\xe8\xe9\xa0\xfe\xf8\xe9\x95\xe5\xc1\x93\xf3\xeb\xeb\xec\xf7\x5d\xcb\x23\x59\x6f\xa4\xcc\x6e\xd5\xb8\xd8\xc8\xd3\xeb\x97\xc6\x3b\xaf\x2c\x74\xda\xaf\xb3\x49\xbc\xeb\xdb\x4e\xe9\x1f\x22\xb4\xc8\x13\xd4\x44\xe4\xd1\xed\xd3\x3f\x56\x5c\xd5\x36\x69\x40\x4c\x0c\x24\xcd\x97\x88\x11\x62\x41\x34\x05\x75\x46\xa5\xde\xd2\x26\xb9\x98\xe4\x4a\x73\xe7\x70\xfb\xde\xdd\xa1\xc8\x66\x7e\xb8\x9c\xa6\xa7\x4f\x7f\x33\x55\x65\xef\xf2\x51\xf7\x75\x86\x2e\x60\x74\xdf\x47\xe9\x02\x46\x77\x27\x7d\x17\x7e\x3a\x3b\xd1\x27\x4f\xfb\x6d\x08\x8a\x79\xa2\xc5\x5b\x2b\xb6\xb8\x27\x69\xf6\x1c\x12\x1b\x4a\x40\x1a\x2d\x90\xcd\xfa\x2c\x41\x2a\xc6\x25\x17\xb2\x20\xa3\xbd\x21\x5c\x7c\x3a\x3c\xbf\xa0\xf1\xc6\x53\xe6\x4e\x4e\x78\x4b\x9c\x79\x95\xc4\xbb\x93\x0c\xaf\xcc\x72\x46\xa9\x96\x89\x4f\xc1\x8f\xd8\xb8\x3d\x47\x46\xc1\xa0\x2a\x8e\x14\xe4\x5a\x3c\x90\xad\x06\x38\xa3\x86\x12\x15\x2a\xed\x25\x2b\x9b\x6e\x06\xcb\xdd\xcd\xab\xe5\x66\x28\xab\xe5\xff\x1f\x87\x32\xdf\x1c\x2f\xe2\x1e\xf1\xfb\x93\x5f\x5e\x95\xe4\x3a\x2f\x40\xbd\x15\x92\xeb\xbc\x8a\xd4\x49\x72\x5d\x17\x79\x26\x49\x2e\x18\x46\x35\x91\x5a\x19\xad\xd0\xaa\x3d\xed\x11\x89\x39\x30\xbb\x08\xb5\x72\x00\x12\xd3\x18\xba\x3a\xb0\x18\xc4\x79\x1d\x4d\x0d\x7c\x43\x50\x76\x74\xbc\x5a\x8f\xc3\x9f\x0f\x5f\xfb\x51\x7b\x31\x8d\xb0\xbf\xff\xc7\xab\x22\xac\xf3\xee\x5e\x27\xc2\x3a\x2f\x5e\x76\x22\xac\xf3\x22\xdd\x1b\x0f\xa3\xed\x2b\x98\x30\x89\x30\xb2\x7e\x4f\x22\x99\x52\x2e\xce\xfa\x08\x71\xdb\x9b\xed\x8a\x07\xf6\xca\x42\x8e\x81\x98\x3c\x56\x25\xe1\x66\x84\xd1\x6d\x5f\xf6\xd9\x85\xcc\x3f\x8a\x9c\xa6\x0b\xb2\xff\x97\xd3\x7c\xe5\x39\x0d\x07\x32\x13\x89\x3f\x59\xc5\x5e\xef\x69\x1e\x4a\xd9\xa5\x48\xd5\x00\x59\xbf\x2d\x71\x15\xe0\x18\x02\xd4\xea\x92\xf2\xb6\x44\x15\xdf\x56\xb4\xbf\xb0\x4b\xbe\x76\x3c\xcf\x9b\xed\x85\xe8\x3f\x8a\x4d\xd2\x95\x1e\x7d\x79\x9b\xa4\x13\x5d\xff\xdb\x37\x89\xd1\xce\x78\x9a\xda\x24\xe4\x39\x98\x3d\x92\x38\x73\x25\xcb\xaa\x80\xb1\x49\x01\x19\xb3\xad\xd9\x65\xc8\xac\x1d\x67\x1b\xd9\x5d\xfc\xa3\x26\x6f\x33\x23\x7b\x79\x17\x55\xaf\xbe\xef\x14\x68\x5d\x35\x91\x2f\x31\x0b\xec\x84\xdb\x9f\x5e\x16\xf8\xa6\x77\x06\x5a\xb4\x93\x27\x24\x46\x23\x79\xb5\x47\x64\x09\x67\x2f\xa4\x14\x64\x8a\x11\x08\x7d\xcb\x68\x84\x21\x92\xd7\xc9\x0a\x6b\x8c\x6f\x4b\xc6\x4f\x8a\xac\xf4\xe5\xdd\x25\xba\x89\xe2\xea\xcd\xec\x94\xeb\x63\xbc\x73\x73\x75\x61\x7c\x52\xfb\x58\x74\x4c\x13\x57\xe0\xc8\x92\x71\xfb\x7a\x1c\x33\x5b\xa7\x8a\x72\x10\x22\x79\x20\x57\x1d\x70\x52\x16\xa2\x78\x64\x5b\x4c\x4c\x7c\xe1\x2f\x03\x75\x5e\xc4\xb9\x7e\x8b\xfe\xf6\x6f\x2f\xbe\x00\xef\x3b\xef\x0c\x77\xe6\x9b\x7c\xb2\xd9\xcc\x57\xcb\x61\x3e\xca\xd1\xe6\xfb\xcb\x3f\x1b\x3e\x5a\xca\xf7\x97\xed\xdf\x3b\xef\x0c\xb7\xf3\x78\xee\xd9\xdd\x51\x8e\x06\x18\x56\x8f\x97\x17\x2e\x53\xad\xce\x80\xae\x95\x52\x93\x97\x5f\x98\x50\x5d\xca\xb5\x76\x1e\xec\x5a\xf2\xe3\xa7\xff\x13\x00\x00\xff\xff\xc1\xbb\xa7\x0d\x88\x59\x00\x00")

func templatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesJson,
		"templates.json",
	)
}

func templatesJson() (*asset, error) {
	bytes, err := templatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.json", size: 22920, mode: os.FileMode(420), modTime: time.Unix(1607892485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates.json": templatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates.json": &bintree{templatesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

